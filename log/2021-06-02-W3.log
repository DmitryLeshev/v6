2021-06-02T13:34:10.244Z [debug] createSandbox
2021-06-02T13:34:10.246Z [info] Application started in worker 3
2021-06-02T13:34:10.250Z [info] Listen port 8002 in worker 3
2021-06-02T13:37:58.949Z [debug] createSandbox
2021-06-02T13:37:58.951Z [info] Application started in worker 3
2021-06-02T13:37:58.953Z [info] Listen port 8002 in worker 3
2021-06-02T13:38:56.906Z [debug] createSandbox
2021-06-02T13:38:56.908Z [info] Application started in worker 3
2021-06-02T13:38:56.910Z [info] Listen port 8002 in worker 3
2021-06-02T13:40:39.780Z [debug] createSandbox
2021-06-02T13:40:39.782Z [info] Application started in worker 3
2021-06-02T13:40:39.784Z [info] Listen port 8002 in worker 3
2021-06-02T13:41:16.422Z [debug] createSandbox
2021-06-02T13:41:16.424Z [info] Application started in worker 3
2021-06-02T13:41:16.427Z [info] Listen port 8002 in worker 3
2021-06-02T13:41:23.649Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T13:54:59.441Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T13:57:00.600Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:00:06.313Z [debug] createSandbox
2021-06-02T14:00:06.315Z [info] Application started in worker 3
2021-06-02T14:00:06.318Z [info] Listen port 8002 in worker 3
2021-06-02T14:02:52.947Z [debug] createSandbox
2021-06-02T14:02:52.949Z [info] Application started in worker 3
2021-06-02T14:02:52.952Z [info] Listen port 8002 in worker 3
2021-06-02T14:10:23.300Z [debug] createSandbox
2021-06-02T14:10:23.302Z [info] Application started in worker 3
2021-06-02T14:10:23.304Z [info] Listen port 8002 in worker 3
2021-06-02T14:10:41.551Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:10:41.553Z [error] TypeError: Cannot read property 'get' of null;  Application.getStaticFile (\lib\application.js:125:24);  Channel.static (\lib\channel.js:135:30);  Server.listener (\lib\server.js:111:18);  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:10:46.562Z [error] 127.0.0.1	GET	/	504	Gateway Timeout
2021-06-02T14:11:13.512Z [debug] createSandbox
2021-06-02T14:11:13.514Z [info] Application started in worker 3
2021-06-02T14:11:13.516Z [info] Listen port 8002 in worker 3
2021-06-02T14:11:34.629Z [debug] createSandbox
2021-06-02T14:11:34.630Z [info] Application started in worker 3
2021-06-02T14:11:34.633Z [info] Listen port 8002 in worker 3
2021-06-02T14:13:13.416Z [debug] createSandbox
2021-06-02T14:13:13.418Z [info] Application started in worker 3
2021-06-02T14:13:13.421Z [info] Listen port 8002 in worker 3
2021-06-02T14:14:05.483Z [debug] createSandbox
2021-06-02T14:14:05.485Z [info] Application started in worker 3
2021-06-02T14:14:05.487Z [info] Listen port 8002 in worker 3
2021-06-02T14:14:37.058Z [debug] createSandbox
2021-06-02T14:14:37.060Z [info] Application started in worker 3
2021-06-02T14:14:37.062Z [info] Listen port 8002 in worker 3
2021-06-02T14:14:54.557Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:14:54.559Z [warn] { url: '/' }
2021-06-02T14:15:07.797Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:15:07.798Z [warn] { url: '/' }
2021-06-02T14:15:57.028Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:15:57.029Z [warn] { url: '/api/api' }
2021-06-02T14:15:57.029Z [warn] api
2021-06-02T14:16:30.859Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:16:30.859Z [warn] { url: '/api' }
2021-06-02T14:16:30.859Z [warn] api
2021-06-02T14:16:55.186Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:16:55.186Z [warn] { url: '/api' }
2021-06-02T14:16:55.186Z [warn] api
2021-06-02T14:17:24.835Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:17:24.835Z [warn] { url: '/api' }
2021-06-02T14:17:24.836Z [warn] api
2021-06-02T14:17:29.328Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:17:29.328Z [warn] { url: '/' }
2021-06-02T14:17:48.063Z [debug] createSandbox
2021-06-02T14:17:48.065Z [info] Application started in worker 3
2021-06-02T14:17:48.067Z [info] Listen port 8002 in worker 3
2021-06-02T14:17:50.199Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:17:50.199Z [warn] { url: '/' }
2021-06-02T14:17:50.200Z [error] TypeError: Cannot read property 'get' of null;  Application.getStaticFile (\lib\application.js:125:24);  Channel.static (\lib\channel.js:135:30);  Server.listener (\lib\server.js:112:18);  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:17:55.205Z [error] 127.0.0.1	GET	/	504	Gateway Timeout
2021-06-02T14:24:02.165Z [debug] createSandbox
2021-06-02T14:24:02.169Z [info] Listen port 8002 in worker 3
2021-06-02T14:24:02.273Z [info] Application started in worker 3
2021-06-02T14:24:53.902Z [debug] createSandbox
2021-06-02T14:24:53.905Z [info] Listen port 8002 in worker 3
2021-06-02T14:24:53.911Z [info] Application started in worker 3
2021-06-02T14:24:56.153Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:24:56.154Z [warn] { url: '/' }
2021-06-02T14:24:56.156Z [log] 127.0.0.1	GET	/
2021-06-02T14:25:50.193Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:25:50.194Z [warn] { url: '/images/moon.jpg' }
2021-06-02T14:25:50.194Z [log] 127.0.0.1	GET	/images/moon.jpg
2021-06-02T14:27:55.599Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:27:55.599Z [warn] { url: '/images/test.png' }
2021-06-02T14:27:55.600Z [log] 127.0.0.1	GET	/images/test.png
2021-06-02T14:28:06.883Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:28:06.884Z [warn] { url: '/api' }
2021-06-02T14:28:49.798Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:28:49.798Z [warn] { url: '/api' }
2021-06-02T14:28:56.884Z [debug] createSandbox
2021-06-02T14:28:56.888Z [info] Listen port 8002 in worker 3
2021-06-02T14:28:56.894Z [info] Application started in worker 3
2021-06-02T14:28:59.530Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:28:59.530Z [warn] { url: '/api' }
2021-06-02T14:28:59.530Z [error] 127.0.0.1	GET	/api	403	Forbidden
2021-06-02T14:29:48.597Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:29:48.598Z [warn] { url: '/api' }
2021-06-02T14:31:15.975Z [debug] createSandbox
2021-06-02T14:31:15.979Z [info] Listen port 8002 in worker 3
2021-06-02T14:31:15.988Z [info] Application started in worker 3
2021-06-02T14:31:48.642Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:31:48.642Z [warn] { url: '/api' }
2021-06-02T14:31:48.644Z [error] 127.0.0.1	POST	/api	500	Error: JSON parsing error;  Channel.message (\lib\channel.js:184:23);  \lib\server.js:129:17;  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:32:41.114Z [debug] createSandbox
2021-06-02T14:32:41.120Z [info] Listen port 8002 in worker 3
2021-06-02T14:32:41.129Z [info] Application started in worker 3
2021-06-02T14:32:43.758Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:32:43.759Z [warn] { url: '/api' }
2021-06-02T14:32:43.759Z [log] { body: Promise { <pending> } }
2021-06-02T14:32:43.760Z [error] 127.0.0.1	POST	/api	500	Error: JSON parsing error;  Channel.message (\lib\channel.js:184:23);  \lib\server.js:130:17;  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:33:09.186Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:33:09.186Z [warn] { url: '/api' }
2021-06-02T14:33:09.186Z [log] { body: Promise { <pending> } }
2021-06-02T14:33:09.187Z [error] TypeError: Cannot read property 'toString' of undefined;  Application.getMethod (\lib\application.js:134:35);  Channel.rpc (\lib\channel.js:201:30);  Channel.message (\lib\channel.js:192:12);  \lib\server.js:130:17;  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:33:14.189Z [error] 127.0.0.1	POST	/api	504	Gateway Timeout
2021-06-02T14:34:59.657Z [debug] createSandbox
2021-06-02T14:34:59.661Z [info] Listen port 8002 in worker 3
2021-06-02T14:34:59.670Z [info] Application started in worker 3
2021-06-02T14:35:02.042Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:35:02.043Z [warn] { url: '/api' }
2021-06-02T14:35:02.044Z [log] { body: Promise { <pending> } }
2021-06-02T14:35:02.045Z [error] 127.0.0.1	POST	/api	504	Gateway Timeout
2021-06-02T14:35:45.018Z [debug] createSandbox
2021-06-02T14:35:45.022Z [info] Listen port 8002 in worker 3
2021-06-02T14:35:45.029Z [info] Application started in worker 3
2021-06-02T14:35:47.628Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:35:47.628Z [warn] { url: '/api' }
2021-06-02T14:35:47.629Z [log] { body: Promise { <pending> } }
2021-06-02T14:35:47.630Z [log] { packet: { call: 1, 'example/create': { test: 'test' } } }
2021-06-02T14:35:47.631Z [error] ReferenceError: proc is not defined;  Application.getMethod (\lib\application.js:137:5);  Channel.rpc (\lib\channel.js:202:30);  Channel.message (\lib\channel.js:193:12);  \lib\server.js:130:17;  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:35:52.629Z [error] 127.0.0.1	POST	/api	504	Gateway Timeout
2021-06-02T14:36:42.044Z [debug] createSandbox
2021-06-02T14:36:42.048Z [info] Listen port 8002 in worker 3
2021-06-02T14:36:42.055Z [info] Application started in worker 3
2021-06-02T14:36:44.723Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:36:44.724Z [warn] { url: '/api' }
2021-06-02T14:36:44.726Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:36:44.726Z [error] ReferenceError: proc is not defined;  Application.getMethod (\lib\application.js:137:5);  Channel.rpc (\lib\channel.js:202:30);  Channel.message (\lib\channel.js:192:12);  \lib\server.js:129:17;  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:36:49.728Z [error] 127.0.0.1	POST	/api	504	Gateway Timeout
2021-06-02T14:38:24.597Z [debug] createSandbox
2021-06-02T14:38:24.602Z [info] Listen port 8002 in worker 3
2021-06-02T14:38:24.611Z [info] Application started in worker 3
2021-06-02T14:38:27.807Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:38:27.807Z [warn] { url: '/api' }
2021-06-02T14:38:27.809Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:38:27.810Z [error] TypeError: Cannot read property 'toString' of undefined;  Application.getMethod (\lib\application.js:139:35);  Channel.rpc (\lib\channel.js:202:30);  Channel.message (\lib\channel.js:192:12);  \lib\server.js:129:17;  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:38:32.817Z [error] 127.0.0.1	POST	/api	504	Gateway Timeout
2021-06-02T14:42:18.090Z [debug] createSandbox
2021-06-02T14:42:18.096Z [info] Listen port 8002 in worker 3
2021-06-02T14:42:18.106Z [info] Application started in worker 3
2021-06-02T14:42:21.342Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:42:21.342Z [warn] { url: '/api' }
2021-06-02T14:42:21.344Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:42:21.344Z [debug] { iname: 'example', ver: '*', methodName: 'create' }
2021-06-02T14:42:21.344Z [error] TypeError: Cannot read property 'toString' of undefined;  Application.getMethod (\lib\application.js:143:35);  Channel.rpc (\lib\channel.js:202:30);  Channel.message (\lib\channel.js:192:12);  \lib\server.js:129:17;  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:42:26.353Z [error] 127.0.0.1	POST	/api	504	Gateway Timeout
2021-06-02T14:43:01.366Z [debug] createSandbox
2021-06-02T14:43:01.372Z [info] Listen port 8002 in worker 3
2021-06-02T14:43:01.378Z [info] Application started in worker 3
2021-06-02T14:43:04.008Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:43:04.008Z [warn] { url: '/api' }
2021-06-02T14:43:04.010Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:43:04.010Z [error] TypeError: Cannot read property 'toString' of undefined;  Application.getMethod (\lib\application.js:142:35);  Channel.rpc (\lib\channel.js:202:30);  Channel.message (\lib\channel.js:192:12);  \lib\server.js:129:17;  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:43:09.009Z [error] 127.0.0.1	POST	/api	504	Gateway Timeout
2021-06-02T14:43:37.856Z [debug] createSandbox
2021-06-02T14:43:37.859Z [info] Listen port 8002 in worker 3
2021-06-02T14:43:37.965Z [info] Application started in worker 3
2021-06-02T14:43:40.988Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:43:40.988Z [warn] { url: '/api' }
2021-06-02T14:43:40.990Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:43:40.990Z [debug] {;  iname: 'example',;  ver: '*',;  methodName: 'create',;  iface: {;    create: {;      '1': [Function: 1],;      '2': [Function: 2],;      default: 1,;      version: '*';    };  };}
2021-06-02T14:43:40.990Z [error] TypeError: Cannot read property 'toString' of undefined;  Application.getMethod (\lib\application.js:143:35);  Channel.rpc (\lib\channel.js:202:30);  Channel.message (\lib\channel.js:192:12);  \lib\server.js:129:17;  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:43:45.992Z [error] 127.0.0.1	POST	/api	504	Gateway Timeout
2021-06-02T14:44:23.098Z [debug] createSandbox
2021-06-02T14:44:23.103Z [info] Listen port 8002 in worker 3
2021-06-02T14:44:23.112Z [info] Application started in worker 3
2021-06-02T14:44:25.003Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:44:25.003Z [warn] { url: '/api' }
2021-06-02T14:44:25.005Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:44:25.005Z [error] TypeError: Cannot read property 'toString' of undefined;  Application.getMethod (\lib\application.js:142:35);  Channel.rpc (\lib\channel.js:202:30);  Channel.message (\lib\channel.js:192:12);  \lib\server.js:129:17;  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:44:30.018Z [error] 127.0.0.1	POST	/api	504	Gateway Timeout
2021-06-02T14:44:48.073Z [debug] createSandbox
2021-06-02T14:44:48.078Z [info] Listen port 8002 in worker 3
2021-06-02T14:44:48.210Z [info] Application started in worker 3
2021-06-02T14:44:49.267Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:44:49.267Z [warn] { url: '/api' }
2021-06-02T14:44:49.269Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:44:49.269Z [debug] {;  iname: 'example',;  ver: '*',;  methodName: 'create',;  iface: {;    create: {;      '1': [Function: 1],;      '2': [Function: 2],;      default: 1,;      version: '*';    };  },;  version: undefined;}
2021-06-02T14:44:49.270Z [error] TypeError: Cannot read property 'toString' of undefined;  Application.getMethod (\lib\application.js:143:35);  Channel.rpc (\lib\channel.js:202:30);  Channel.message (\lib\channel.js:192:12);  \lib\server.js:129:17;  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:44:54.281Z [error] 127.0.0.1	POST	/api	504	Gateway Timeout
2021-06-02T14:45:31.535Z [debug] createSandbox
2021-06-02T14:45:31.540Z [info] Listen port 8002 in worker 3
2021-06-02T14:45:31.646Z [info] Application started in worker 3
2021-06-02T14:45:38.154Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:45:38.154Z [warn] { url: '/api' }
2021-06-02T14:45:38.156Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:45:38.156Z [debug] {;  iname: 'example',;  ver: '*',;  methodName: 'create',;  iface: { create: { '1': [Function: 1], '2': [Function: 2] }, default: 1 },;  version: 1;}
2021-06-02T14:45:38.156Z [error] 127.0.0.1	POST	/api	404	Not Found
2021-06-02T14:47:14.578Z [debug] createSandbox
2021-06-02T14:47:14.582Z [info] Listen port 8002 in worker 3
2021-06-02T14:47:14.590Z [info] Application started in worker 3
2021-06-02T14:47:17.749Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:47:17.750Z [warn] { url: '/api' }
2021-06-02T14:47:17.751Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:47:17.752Z [debug] {;  iname: 'example',;  ver: '*',;  methodName: 'create',;  iface: {;    '1': { create: [Function: create] },;    '2': { create: [Function: create] },;    default: 1;  },;  version: 1,;  methods: { create: [Function: create] },;  proc: [Function: create];}
2021-06-02T14:47:17.752Z [error] 127.0.0.1	POST	/api	504	Gateway Timeout
2021-06-02T14:47:29.893Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:47:29.894Z [warn] { url: '/api' }
2021-06-02T14:47:29.894Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:47:29.894Z [debug] {;  iname: 'example',;  ver: '*',;  methodName: 'create',;  iface: {;    '1': { create: [Function: create] },;    '2': { create: [Function: create] },;    default: 1;  },;  version: 1,;  methods: { create: [Function: create] },;  proc: [Function: create];}
2021-06-02T14:47:29.894Z [error] 127.0.0.1	POST	/api	504	Gateway Timeout
2021-06-02T14:51:38.398Z [debug] createSandbox
2021-06-02T14:51:38.402Z [info] Listen port 8002 in worker 3
2021-06-02T14:51:38.409Z [info] Application started in worker 3
2021-06-02T14:51:43.582Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:51:43.583Z [warn] { url: '/api' }
2021-06-02T14:51:43.584Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:51:43.585Z [debug] {;  iname: 'example',;  ver: '*',;  methodName: 'create',;  iface: {;    '1': { create: [Object] },;    '2': { create: [Function: create] },;    default: 1;  },;  version: 1,;  methods: {;    create: { method: [Function: method], enter: [AsyncFunction: enter] };  },;  proc: { method: [Function: method], enter: [AsyncFunction: enter] };}
2021-06-02T14:51:43.585Z [error] 127.0.0.1	POST	/api	504	Gateway Timeout
2021-06-02T14:54:22.551Z [debug] createSandbox
2021-06-02T14:54:22.557Z [info] Listen port 8002 in worker 3
2021-06-02T14:54:22.565Z [info] Application started in worker 3
2021-06-02T14:54:24.505Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:54:24.505Z [warn] { url: '/api' }
2021-06-02T14:54:24.507Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:54:24.508Z [debug] {;  iname: 'example',;  ver: '*',;  methodName: 'create',;  iface: {;    '1': { create: [Object] },;    '2': { create: [Function: create] },;    default: 1;  },;  version: 1,;  methods: {;    create: { method: [Function: method], enter: [AsyncFunction: enter] };  },;  proc: { method: [Function: method], enter: [AsyncFunction: enter] };}
2021-06-02T14:54:24.508Z [log] enter v 1
2021-06-02T14:54:24.508Z [error] 127.0.0.1	POST	/api	403	Forbidden
2021-06-02T14:55:18.572Z [debug] createSandbox
2021-06-02T14:55:18.576Z [info] Listen port 8002 in worker 3
2021-06-02T14:55:18.583Z [info] Application started in worker 3
2021-06-02T14:55:21.320Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:55:21.320Z [warn] { url: '/api' }
2021-06-02T14:55:21.322Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:55:21.322Z [debug] {;  iname: 'example',;  ver: '*',;  methodName: 'create',;  iface: {;    '1': { create: [Object] },;    '2': { create: [Function: create] },;    default: 1;  },;  version: 1,;  methods: {;    create: {;      access: 'public',;      method: [Function: method],;      enter: [AsyncFunction: enter];    };  },;  proc: {;    access: 'public',;    method: [Function: method],;    enter: [AsyncFunction: enter];  };}
2021-06-02T14:55:21.322Z [log] enter v 1
2021-06-02T14:55:21.323Z [error] 127.0.0.1	POST	/api	500	TypeError: proc.invoke is not a function;  Channel.rpc (\lib\channel.js:220:27);  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:55:21.326Z [error] TypeError: proc.leave is not a function;  Channel.rpc (\lib\channel.js:225:12);  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:57:02.577Z [debug] createSandbox
2021-06-02T14:57:02.581Z [info] Listen port 8002 in worker 3
2021-06-02T14:57:02.588Z [info] Application started in worker 3
2021-06-02T14:57:03.634Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T14:57:03.635Z [warn] { url: '/api' }
2021-06-02T14:57:03.636Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T14:57:03.637Z [debug] {;  iname: 'example',;  ver: '*',;  methodName: 'create',;  iface: {;    '1': { create: [Object] },;    '2': { create: [Function: create] },;    default: 1;  },;  version: 1,;  methods: {;    create: {;      access: 'public',;      method: [Function: method],;      enter: [AsyncFunction: enter];    };  },;  proc: {;    access: 'public',;    method: [Function: method],;    enter: [AsyncFunction: enter];  };}
2021-06-02T14:57:03.637Z [log] enter v 1
2021-06-02T14:57:03.637Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { test: 'test' };}
2021-06-02T14:57:03.637Z [error] 127.0.0.1	POST	/api	500	TypeError: proc.invoke is not a function;  Channel.rpc (\lib\channel.js:221:27);  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T14:57:03.640Z [error] TypeError: proc.leave is not a function;  Channel.rpc (\lib\channel.js:226:12);  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T15:06:24.353Z [debug] createSandbox
2021-06-02T15:06:24.357Z [info] Listen port 8002 in worker 3
2021-06-02T15:06:24.365Z [info] Application started in worker 3
2021-06-02T15:06:29.162Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:06:29.162Z [warn] { url: '/api' }
2021-06-02T15:06:29.164Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T15:06:29.164Z [error] 127.0.0.1	POST	/api	404	Not Found
2021-06-02T15:07:35.695Z [debug] createSandbox
2021-06-02T15:07:35.700Z [info] Listen port 8002 in worker 3
2021-06-02T15:07:35.708Z [info] Application started in worker 3
2021-06-02T15:07:39.838Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:07:39.839Z [warn] { url: '/api' }
2021-06-02T15:07:39.840Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'create',;  args: { test: 'test' };}
2021-06-02T15:07:39.840Z [error] 127.0.0.1	POST	/api	404	Not Found
2021-06-02T15:08:01.671Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:08:01.671Z [warn] { url: '/api' }
2021-06-02T15:08:01.671Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'creat',;  args: { test: 'test' };}
2021-06-02T15:08:01.671Z [error] 127.0.0.1	POST	/api	404	Not Found
2021-06-02T15:09:04.120Z [debug] createSandbox
2021-06-02T15:09:04.123Z [info] Listen port 8002 in worker 3
2021-06-02T15:09:04.132Z [info] Application started in worker 3
2021-06-02T15:09:06.326Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:09:06.327Z [warn] { url: '/api' }
2021-06-02T15:09:06.328Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'creat',;  args: { test: 'test' };}
2021-06-02T15:09:06.329Z [warn] { collection: {} }
2021-06-02T15:09:06.329Z [error] 127.0.0.1	POST	/api	404	Not Found
2021-06-02T15:09:18.938Z [debug] createSandbox
2021-06-02T15:09:18.942Z [info] Listen port 8002 in worker 3
2021-06-02T15:09:18.957Z [error] ReferenceError: crud is not defined;  \application\api\example\index.js:1:12;  new Procedure (\lib\procedure.js:11:17);  Interfaces.change (\lib\interfaces.js:75:18);  async Interfaces.load (\lib\cache.js:19:14);  async Interfaces.load (\lib\cache.js:18:33)
2021-06-02T15:09:18.961Z [info] Application started in worker 3
2021-06-02T15:09:19.973Z [error] ReferenceError: crud is not defined;  \application\api\example\index.js:1:12;  new Procedure (\lib\procedure.js:11:17);  Interfaces.change (\lib\interfaces.js:75:18)
2021-06-02T15:09:35.720Z [error] \application\api\example\index.js:2;;;;SyntaxError: Unexpected end of input;  new Script (vm.js:100:7);  new Script (\lib\utils\vm.js:41:19);  Interfaces.createScript (\lib\interfaces.js:31:27);  async Interfaces.change (\lib\interfaces.js:73:20)
2021-06-02T15:09:42.785Z [error] \application\api\example.2\index.js:35;;;;SyntaxError: Unexpected end of input;  new Script (vm.js:100:7);  new Script (\lib\utils\vm.js:41:19);  Interfaces.createScript (\lib\interfaces.js:31:27);  async Interfaces.change (\lib\interfaces.js:73:20)
2021-06-02T15:09:48.930Z [debug] createSandbox
2021-06-02T15:09:48.935Z [info] Listen port 8002 in worker 3
2021-06-02T15:09:48.949Z [error] \application\api\example\index.js:2;;;;SyntaxError: Unexpected end of input;  new Script (vm.js:100:7);  new Script (\lib\utils\vm.js:41:19);  Interfaces.createScript (\lib\interfaces.js:31:27);  async Interfaces.change (\lib\interfaces.js:73:20);  async Interfaces.load (\lib\cache.js:19:14);  async Interfaces.load (\lib\cache.js:18:33)
2021-06-02T15:09:48.950Z [error] \application\api\example.2\index.js:35;;;;SyntaxError: Unexpected end of input;  new Script (vm.js:100:7);  new Script (\lib\utils\vm.js:41:19);  Interfaces.createScript (\lib\interfaces.js:31:27);  async Interfaces.change (\lib\interfaces.js:73:20);  async Interfaces.load (\lib\cache.js:19:14);  async Interfaces.load (\lib\cache.js:18:33)
2021-06-02T15:09:48.951Z [info] Application started in worker 3
2021-06-02T15:11:43.358Z [debug] createSandbox
2021-06-02T15:11:43.365Z [info] Listen port 8002 in worker 3
2021-06-02T15:11:43.375Z [info] Application started in worker 3
2021-06-02T15:11:48.961Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:11:48.962Z [warn] { url: '/api' }
2021-06-02T15:11:48.963Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'creat',;  args: { test: 'test' };}
2021-06-02T15:11:48.964Z [warn] { collection: { example: { default: NaN, undefined: [Object] } } }
2021-06-02T15:11:48.964Z [error] 127.0.0.1	POST	/api	404	Not Found
2021-06-02T15:12:24.880Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:12:24.881Z [warn] { url: '/api' }
2021-06-02T15:12:24.881Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:12:24.881Z [warn] { collection: { example: { default: NaN, undefined: [Object] } } }
2021-06-02T15:12:24.881Z [error] 127.0.0.1	POST	/api	404	Not Found
2021-06-02T15:13:01.527Z [debug] createSandbox
2021-06-02T15:13:01.532Z [info] Listen port 8002 in worker 3
2021-06-02T15:13:01.548Z [info] Application started in worker 3
2021-06-02T15:13:05.577Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:13:05.577Z [warn] { url: '/api' }
2021-06-02T15:13:05.579Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:13:05.579Z [warn] { collection: { example: { default: NaN, undefined: [Object] } } }
2021-06-02T15:13:05.580Z [error] 127.0.0.1	POST	/api	404	Not Found
2021-06-02T15:14:23.228Z [debug] createSandbox
2021-06-02T15:14:23.233Z [info] Listen port 8002 in worker 3
2021-06-02T15:14:23.249Z [info] Application started in worker 3
2021-06-02T15:14:25.212Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:14:25.212Z [warn] { url: '/api' }
2021-06-02T15:14:25.214Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:14:25.214Z [warn] {;  iname: 'example',;  ver: '*',;  methodName: 'creat',;  iface: { default: NaN, undefined: { creat: [Procedure] } },;  collection: { example: { default: NaN, undefined: [Object] } };}
2021-06-02T15:14:25.214Z [debug] { version: NaN, methods: undefined }
2021-06-02T15:14:25.214Z [error] 127.0.0.1	POST	/api	404	Not Found
2021-06-02T15:15:52.978Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:15:52.978Z [warn] { url: '/api' }
2021-06-02T15:15:52.978Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:15:52.978Z [warn] {;  iname: 'example',;  ver: '*',;  methodName: 'creat',;  iface: {;    '1': { creat: [Procedure] },;    default: NaN,;    undefined: { creat: [Procedure] };  },;  collection: { example: { '1': [Object], default: NaN, undefined: [Object] } };}
2021-06-02T15:15:52.978Z [debug] { version: NaN, methods: undefined }
2021-06-02T15:15:52.978Z [error] 127.0.0.1	POST	/api	404	Not Found
2021-06-02T15:15:59.790Z [debug] createSandbox
2021-06-02T15:15:59.796Z [info] Listen port 8002 in worker 3
2021-06-02T15:15:59.808Z [info] Application started in worker 3
2021-06-02T15:16:03.606Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:16:03.607Z [warn] { url: '/api' }
2021-06-02T15:16:03.609Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:16:03.609Z [warn] {;  iname: 'example',;  ver: '*',;  methodName: 'creat',;  iface: { '1': { creat: [Procedure] }, default: 1 },;  collection: { example: { '1': [Object], default: 1 } };}
2021-06-02T15:16:03.609Z [debug] {;  version: 1,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:16:03.610Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:16:03.610Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:16:03.610Z [log] example/create
2021-06-02T15:16:03.612Z [log] 127.0.0.1	example/creat
2021-06-02T15:16:25.040Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:16:25.041Z [warn] { url: '/api' }
2021-06-02T15:16:25.041Z [log] {;  callId: 1,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:16:25.041Z [warn] {;  iname: 'example',;  ver: '*',;  methodName: 'creat',;  iface: { '1': { creat: [Procedure] }, default: 1 },;  collection: { example: { '1': [Object], default: 1 } };}
2021-06-02T15:16:25.041Z [debug] {;  version: 1,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:16:25.041Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:16:25.041Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:16:25.042Z [log] example/create example
2021-06-02T15:16:25.042Z [log] 127.0.0.1	example/creat
2021-06-02T15:19:01.239Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:19:01.239Z [warn] { url: '/api' }
2021-06-02T15:19:01.239Z [log] {;  callId: 3,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:19:01.240Z [warn] {;  iname: 'example',;  ver: '*',;  methodName: 'creat',;  iface: { '1': { creat: [Procedure] }, default: 1 },;  collection: { example: { '1': [Object], default: 1 } };}
2021-06-02T15:19:01.240Z [debug] {;  version: 1,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:19:01.240Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:19:01.240Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:19:01.240Z [log] example/create example
2021-06-02T15:19:01.240Z [log] 127.0.0.1	example/creat
2021-06-02T15:19:37.636Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:19:37.636Z [warn] { url: '/api' }
2021-06-02T15:19:37.636Z [log] {;  callId: 3,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:19:37.636Z [warn] {;  iname: 'example',;  ver: '*',;  methodName: 'creat',;  iface: { '1': { creat: [Procedure] }, default: 1 },;  collection: { example: { '1': [Object], default: 1 } };}
2021-06-02T15:19:37.637Z [debug] {;  version: 1,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:19:37.637Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:19:37.637Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:19:37.651Z [log] example/create example {;  Buffer: [Function: Buffer] {;    poolSize: 8192,;    from: [Function: from],;    of: [Function: of],;    alloc: [Function: alloc],;    allocUnsafe: [Function: allocUnsafe],;    allocUnsafeSlow: [Function: allocUnsafeSlow],;    isBuffer: [Function: isBuffer],;    compare: [Function: compare],;    isEncoding: [Function: isEncoding],;    concat: [Function: concat],;    byteLength: [Function: byteLength],;    [Symbol(kIsEncodingSymbol)]: [Function: isEncoding];  },;  URL: [class URL],;  URLSearchParams: [class URLSearchParams],;  TextDecoder: [class TextDecoder],;  TextEncoder: [class TextEncoder],;  console: Console {;    _write: [Function (anonymous)],;    _groupIndent: '',;    _counts: Map(0) {},;    _times: Map(0) {};  },;  queueMicrotask: [Function: queueMicrotask],;  setTimeout: [Function: setTimeout] {;    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)];  },;  setImmediate: [Function: setImmediate] {;    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)];  },;  setInterval: [Function: setInterval],;  clearTimeout: [Function: clearTimeout],;  clearImmediate: [Function: clearImmediate],;  clearInterval: [Function: clearInterval],;  Error: [class Error extends Error],;  node: {;    process: process {;      version: 'v14.15.0',;      versions: [Object],;      arch: 'x64',;      platform: 'win32',;      release: [Object],;      _rawDebug: [Function: _rawDebug],;      moduleLoadList: [Array],;      binding: [Function: binding],;      _linkedBinding: [Function: _linkedBinding],;      _events: [Object: null prototype],;      _eventsCount: 3,;      _maxListeners: undefined,;      domain: null,;      _exiting: false,;      config: [Object],;      dlopen: [Function: dlopen],;      uptime: [Function: uptime],;      _getActiveRequests: [Function: _getActiveRequests],;      _getActiveHandles: [Function: _getActiveHandles],;      reallyExit: [Function: reallyExit],;      _kill: [Function: _kill],;      hrtime: [Function],;      cpuUsage: [Function: cpuUsage],;      resourceUsage: [Function: resourceUsage],;      memoryUsage: [Function: memoryUsage],;      kill: [Function: kill],;      exit: [Function: exit],;      openStdin: [Function (anonymous)],;      allowedNodeEnvironmentFlags: [Getter/Setter],;      assert: [Function: deprecated],;      features: [Object],;      _fatalException: [Function: workerOnGlobalUncaughtException],;      setUncaughtExceptionCaptureCallback: [Function: setUncaughtExceptionCaptureCallback],;      hasUncaughtExceptionCaptureCallback: [Function: hasUncaughtExceptionCaptureCallback],;      emitWarning: [Function: emitWarning],;      nextTick: [Function: nextTick],;      _tickCallback: [Function: runNextTicks],;      stdout: [Getter],;      stdin: [Getter],;      stderr: [Getter],;      abort: [Function],;      chdir: [Function],;      umask: [Function: wrappedUmask],;      cwd: [Function (anonymous)],;      env: [Object],;      title: 'npm start',;      argv: [Array],;      execArgv: [],;      pid: 20352,;      ppid: 19904,;      execPath: 'C:\\Program Files\\nodejs\\node.exe',;      debugPort: 9229,;      argv0: 'node',;      _preload_modules: [],;      mainModule: [Module],;      [Symbol(kCapture)]: false;    },;    util: {;      _errnoException: [Function: errnoException],;      _exceptionWithHostPort: [Function: exceptionWithHostPort],;      _extend: [Function: _extend],;      callbackify: [Function: callbackify],;      debug: [Function: debuglog],;      debuglog: [Function: debuglog],;      deprecate: [Function: deprecate],;      format: [Function: format],;      formatWithOptions: [Function: formatWithOptions],;      getSystemErrorName: [Function: getSystemErrorName],;      inherits: [Function: inherits],;      inspect: [Function],;      isArray: [Function: isArray],;      isBoolean: [Function: isBoolean],;      isBuffer: [Function: isBuffer],;      isDeepStrictEqual: [Function: isDeepStrictEqual],;      isNull: [Function: isNull],;      isNullOrUndefined: [Function: isNullOrUndefined],;      isNumber: [Function: isNumber],;      isString: [Function: isString],;      isSymbol: [Function: isSymbol],;      isUndefined: [Function: isUndefined],;      isRegExp: [Function: isRegExp],;      isObject: [Function: isObject],;      isDate: [Function: isDate],;      isError: [Function: isError],;      isFunction: [Function: isFunction],;      isPrimitive: [Function: isPrimitive],;      log: [Function: log],;      promisify: [Function],;      TextDecoder: [class TextDecoder],;      TextEncoder: [class TextEncoder],;      types: [Object];    },;    childProcess: {;      _forkChild: [Function: _forkChild],;      ChildProcess: [Function: ChildProcess],;      exec: [Function: exec],;      execFile: [Function: execFile],;      execFileSync: [Function: execFileSync],;      execSync: [Function: execSync],;      fork: [Function: fork],;      spawn: [Function: spawn],;      spawnSync: [Function: spawnSync];    },;    worker: {;      isMainThread: false,;      MessagePort: [Function: MessagePort],;      MessageChannel: [Function: MessageChannel],;      markAsUntransferable: [Function: markAsUntransferable],;      moveMessagePortToContext: [Function: moveMessagePortToContext],;      receiveMessageOnPort: [Function: receiveMessageOnPort],;      resourceLimits: [Object],;      threadId: 3,;      SHARE_ENV: Symbol(nodejs.worker_threads.SHARE_ENV),;      Worker: [class Worker extends EventEmitter],;      parentPort: [MessagePort [EventTarget]],;      workerData: undefined;    },;    os: {;      arch: [Function],;      cpus: [Function: cpus],;      endianness: [Function],;      freemem: [Function],;      getPriority: [Function: getPriority],;      homedir: [Function],;      hostname: [Function],;      loadavg: [Function: loadavg],;      networkInterfaces: [Function: networkInterfaces],;      platform: [Function],;      release: [Function],;      setPriority: [Function: setPriority],;      tmpdir: [Function],;      totalmem: [Function],;      type: [Function],;      userInfo: [Function: userInfo],;      uptime: [Function],;      version: [Function],;      constants: [Object: null prototype],;      EOL: '\r\n';    },;    v8: {;      cachedDataVersionTag: [Function: cachedDataVersionTag],;      getHeapSnapshot: [Function: getHeapSnapshot],;      getHeapStatistics: [Function: getHeapStatistics],;      getHeapSpaceStatistics: [Function: getHeapSpaceStatistics],;      getHeapCodeStatistics: [Function: getHeapCodeStatistics],;      setFlagsFromString: [Function: setFlagsFromString],;      Serializer: [class Serializer extends Serializer],;      Deserializer: [class Deserializer extends Deserializer],;      DefaultSerializer: [class DefaultSerializer extends Serializer],;      DefaultDeserializer: [class DefaultDeserializer extends Deserializer],;      deserialize: [Function: deserialize],;      serialize: [Function: serialize],;      writeHeapSnapshot: [Function: writeHeapSnapshot];    },;    vm: {;      Script: [class Script extends ContextifyScript],;      createContext: [Function: createContext],;      createScript: [Function: createScript],;      runInContext: [Function: runInContext],;      runInNewContext: [Function: runInNewContext],;      runInThisContext: [Function: runInThisContext],;      isContext: [Function: isContext],;      compileFunction: [Function: compileFunction],;      measureMemory: [Function: measureMemory];    },;    path: <ref *1> {;      resolve: [Function: resolve],;      normalize: [Function: normalize],;      isAbsolute: [Function: isAbsolute],;      join: [Function: join],;      relative: [Function: relative],;      toNamespacedPath: [Function: toNamespacedPath],;      dirname: [Function: dirname],;      basename: [Function: basename],;      extname: [Function: extname],;      format: [Function: bound _format],;      parse: [Function: parse],;      sep: '\\',;      delimiter: ';',;      win32: [Circular *1],;      posix: [Object],;      _makeLong: [Function: toNamespacedPath];    },;    url: {;      Url: [Function: Url],;      parse: [Function: urlParse],;      resolve: [Function: urlResolve],;      resolveObject: [Function: urlResolveObject],;      format: [Function: urlFormat],;      URL: [class URL],;      URLSearchParams: [class URLSearchParams],;      domainToASCII: [Function: domainToASCII],;      domainToUnicode: [Function: domainToUnicode],;      pathToFileURL: [Function: pathToFileURL],;      fileURLToPath: [Function: fileURLToPath];    },;    StringDecoder: { StringDecoder: [Function: StringDecoder] },;    querystring: {;      unescapeBuffer: [Function: unescapeBuffer],;      unescape: [Function: qsUnescape],;      escape: [Function: qsEscape],;      stringify: [Function: stringify],;      encode: [Function: stringify],;      parse: [Function: parse],;      decode: [Function: parse];    },;    assert: <ref *2> [Function: ok] {;      fail: [Function: fail],;      AssertionError: [class AssertionError extends Error],;      ok: [Circular *2],;      equal: [Function: equal],;      notEqual: [Function: notEqual],;      deepEqual: [Function: deepEqual],;      notDeepEqual: [Function: notDeepEqual],;      deepStrictEqual: [Function: deepStrictEqual],;      notDeepStrictEqual: [Function: notDeepStrictEqual],;      strictEqual: [Function: strictEqual],;      notStrictEqual: [Function: notStrictEqual],;      throws: [Function: throws],;      rejects: [AsyncFunction: rejects],;      doesNotThrow: [Function: doesNotThrow],;      doesNotReject: [AsyncFunction: doesNotReject],;      ifError: [Function: ifError],;      match: [Function: match],;      doesNotMatch: [Function: doesNotMatch],;      CallTracker: [class CallTracker],;      strict: [Function];    },;    stream: <ref *3> [Function: Stream] {;      Readable: [Function],;      Writable: [Function],;      Duplex: [Function: Duplex],;      Transform: [Function: Transform],;      PassThrough: [Function: PassThrough],;      pipeline: [Function: pipeline],;      finished: [Function: eos],;      Stream: [Circular *3],;      _isUint8Array: [Function: isUint8Array],;      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer];    },;    fs: {;      appendFile: [Function: appendFile],;      appendFileSync: [Function: appendFileSync],;      access: [Function: access],;      accessSync: [Function: accessSync],;      chown: [Function: chown],;      chownSync: [Function: chownSync],;      chmod: [Function: chmod],;      chmodSync: [Function: chmodSync],;      close: [Function: close],;      closeSync: [Function: closeSync],;      copyFile: [Function: copyFile],;      copyFileSync: [Function: copyFileSync],;      createReadStream: [Function: createReadStream],;      createWriteStream: [Function: createWriteStream],;      exists: [Function: exists],;      existsSync: [Function: existsSync],;      fchown: [Function: fchown],;      fchownSync: [Function: fchownSync],;      fchmod: [Function: fchmod],;      fchmodSync: [Function: fchmodSync],;      fdatasync: [Function: fdatasync],;      fdatasyncSync: [Function: fdatasyncSync],;      fstat: [Function: fstat],;      fstatSync: [Function: fstatSync],;      fsync: [Function: fsync],;      fsyncSync: [Function: fsyncSync],;      ftruncate: [Function: ftruncate],;      ftruncateSync: [Function: ftruncateSync],;      futimes: [Function: futimes],;      futimesSync: [Function: futimesSync],;      lchown: [Function: lchown],;      lchownSync: [Function: lchownSync],;      lchmod: undefined,;      lchmodSync: undefined,;      link: [Function: link],;      linkSync: [Function: linkSync],;      lstat: [Function: lstat],;      lstatSync: [Function: lstatSync],;      lutimes: [Function: lutimes],;      lutimesSync: [Function: lutimesSync],;      mkdir: [Function: mkdir],;      mkdirSync: [Function: mkdirSync],;      mkdtemp: [Function: mkdtemp],;      mkdtempSync: [Function: mkdtempSync],;      open: [Function: open],;      openSync: [Function: openSync],;      opendir: [Function: opendir],;      opendirSync: [Function: opendirSync],;      readdir: [Function: readdir],;      readdirSync: [Function: readdirSync],;      read: [Function: read],;      readSync: [Function: readSync],;      readv: [Function: readv],;      readvSync: [Function: readvSync],;      readFile: [Function: readFile],;      readFileSync: [Function: readFileSync],;      readlink: [Function: readlink],;      readlinkSync: [Function: readlinkSync],;      realpath: [Function],;      realpathSync: [Function],;      rename: [Function: rename],;      renameSync: [Function: renameSync],;      rm: [Function: rm],;      rmSync: [Function: rmSync],;      rmdir: [Function: rmdir],;      rmdirSync: [Function: rmdirSync],;      stat: [Function: stat],;      statSync: [Function: statSync],;      symlink: [Function: symlink],;      symlinkSync: [Function: symlinkSync],;      truncate: [Function: truncate],;      truncateSync: [Function: truncateSync],;      unwatchFile: [Function: unwatchFile],;      unlink: [Function: unlink],;      unlinkSync: [Function: unlinkSync],;      utimes: [Function: utimes],;      utimesSync: [Function: utimesSync],;      watch: [Function: watch],;      watchFile: [Function: watchFile],;      writeFile: [Function: writeFile],;      writeFileSync: [Function: writeFileSync],;      write: [Function: write],;      writeSync: [Function: writeSync],;      writev: [Function: writev],;      writevSync: [Function: writevSync],;      Dir: [class Dir],;      Dirent: [class Dirent],;      Stats: [Function: Stats],;      ReadStream: [Getter/Setter],;      WriteStream: [Getter/Setter],;      FileReadStream: [Getter/Setter],;      FileWriteStream: [Getter/Setter],;      _toUnixTimestamp: [Function: toUnixTimestamp],;      F_OK: 0,;      R_OK: 4,;      W_OK: 2,;      X_OK: 1,;      constants: [Object: null prototype],;      promises: [Getter];    },;    fsp: {;      access: [AsyncFunction: access],;      copyFile: [AsyncFunction: copyFile],;      open: [AsyncFunction: open],;      opendir: [Function: opendir],;      rename: [AsyncFunction: rename],;      truncate: [AsyncFunction: truncate],;      rm: [AsyncFunction: rm],;      rmdir: [AsyncFunction: rmdir],;      mkdir: [AsyncFunction: mkdir],;      readdir: [AsyncFunction: readdir],;      readlink: [AsyncFunction: readlink],;      symlink: [AsyncFunction: symlink],;      lstat: [AsyncFunction: lstat],;      stat: [AsyncFunction: stat],;      link: [AsyncFunction: link],;      unlink: [AsyncFunction: unlink],;      chmod: [AsyncFunction: chmod],;      lchmod: [AsyncFunction: lchmod],;      lchown: [AsyncFunction: lchown],;      chown: [AsyncFunction: chown],;      utimes: [AsyncFunction: utimes],;      lutimes: [AsyncFunction: lutimes],;      realpath: [AsyncFunction: realpath],;      mkdtemp: [AsyncFunction: mkdtemp],;      writeFile: [AsyncFunction: writeFile],;      appendFile: [AsyncFunction: appendFile],;      readFile: [AsyncFunction: readFile];    },;    crypto: {;      createCipheriv: [Function: createCipheriv],;      createDecipheriv: [Function: createDecipheriv],;      createDiffieHellman: [Function: createDiffieHellman],;      createDiffieHellmanGroup: [Function: createDiffieHellmanGroup],;      createECDH: [Function: createECDH],;      createHash: [Function: createHash],;      createHmac: [Function: createHmac],;      createPrivateKey: [Function: createPrivateKey],;      createPublicKey: [Function: createPublicKey],;      createSecretKey: [Function: createSecretKey],;      createSign: [Function: createSign],;      createVerify: [Function: createVerify],;      diffieHellman: [Function: diffieHellman],;      getCiphers: [Function (anonymous)],;      getCurves: [Function (anonymous)],;      getDiffieHellman: [Function: createDiffieHellmanGroup],;      getHashes: [Function (anonymous)],;      pbkdf2: [Function: pbkdf2],;      pbkdf2Sync: [Function: pbkdf2Sync],;      generateKeyPair: [Function: generateKeyPair],;      generateKeyPairSync: [Function: generateKeyPairSync],;      privateDecrypt: [Function (anonymous)],;      privateEncrypt: [Function (anonymous)],;      publicDecrypt: [Function (anonymous)],;      publicEncrypt: [Function (anonymous)],;      randomBytes: [Function: randomBytes],;      randomFill: [Function: randomFill],;      randomFillSync: [Function: randomFillSync],;      randomInt: [Function: randomInt],;      scrypt: [Function: scrypt],;      scryptSync: [Function: scryptSync],;      sign: [Function: signOneShot],;      setEngine: [Function: setEngine],;      timingSafeEqual: [Function: timingSafeEqual],;      getFips: [Function: getFipsDisabled],;      setFips: [Function: setFipsDisabled],;      verify: [Function: verifyOneShot],;      Certificate: [Function],;      Cipher: [Function: Cipher],;      Cipheriv: [Function: Cipheriv],;      Decipher: [Function: Decipher],;      Decipheriv: [Function: Decipheriv],;      DiffieHellman: [Function: DiffieHellman],;      DiffieHellmanGroup: [Function: DiffieHellmanGroup],;      ECDH: [Function],;      Hash: [Function: Hash],;      Hmac: [Function: Hmac],;      KeyObject: [class KeyObject],;      Sign: [Function: Sign],;      Verify: [Function: Verify],;      constants: [Object: null prototype];    },;    zlib: {;      Deflate: [Function: Deflate],;      Inflate: [Function: Inflate],;      Gzip: [Function: Gzip],;      Gunzip: [Function: Gunzip],;      DeflateRaw: [Function: DeflateRaw],;      InflateRaw: [Function: InflateRaw],;      Unzip: [Function: Unzip],;      BrotliCompress: [Function: BrotliCompress],;      BrotliDecompress: [Function: BrotliDecompress],;      deflate: [Function: asyncBufferWrapper],;      deflateSync: [Function: syncBufferWrapper],;      gzip: [Function: asyncBufferWrapper],;      gzipSync: [Function: syncBufferWrapper],;      deflateRaw: [Function: asyncBufferWrapper],;      deflateRawSync: [Function: syncBufferWrapper],;      unzip: [Function: asyncBufferWrapper],;      unzipSync: [Function: syncBufferWrapper],;      inflate: [Function: asyncBufferWrapper],;      inflateSync: [Function: syncBufferWrapper],;      gunzip: [Function: asyncBufferWrapper],;      gunzipSync: [Function: syncBufferWrapper],;      inflateRaw: [Function: asyncBufferWrapper],;      inflateRawSync: [Function: syncBufferWrapper],;      brotliCompress: [Function: asyncBufferWrapper],;      brotliCompressSync: [Function: syncBufferWrapper],;      brotliDecompress: [Function: asyncBufferWrapper],;      brotliDecompressSync: [Function: syncBufferWrapper],;      createDeflate: [Function: value],;      createInflate: [Function: value],;      createDeflateRaw: [Function: value],;      createInflateRaw: [Function: value],;      createGzip: [Function: value],;      createGunzip: [Function: value],;      createUnzip: [Function: value],;      createBrotliCompress: [Function: value],;      createBrotliDecompress: [Function: value],;      constants: [Object: null prototype],;      codes: [Object];    },;    readline: {;      Interface: [Function: Interface],;      clearLine: [Function: clearLine],;      clearScreenDown: [Function: clearScreenDown],;      createInterface: [Function: createInterface],;      cursorTo: [Function: cursorTo],;      emitKeypressEvents: [Function: emitKeypressEvents],;      moveCursor: [Function: moveCursor];    },;    perfHooks: {;      performance: [Object],;      PerformanceObserver: [class PerformanceObserver extends AsyncResource],;      monitorEventLoopDelay: [Function: monitorEventLoopDelay],;      constants: [Object];    },;    asyncHooks: {;      AsyncLocalStorage: [class AsyncLocalStorage],;      createHook: [Function: createHook],;      executionAsyncId: [Function: executionAsyncId],;      triggerAsyncId: [Function: triggerAsyncId],;      executionAsyncResource: [Function: executionAsyncResource],;      AsyncResource: [class AsyncResource];    },;    timers: {;      setTimeout: [Function],;      clearTimeout: [Function: clearTimeout],;      setImmediate: [Function],;      clearImmediate: [Function: clearImmediate],;      setInterval: [Function: setInterval],;      clearInterval: [Function: clearInterval],;      _unrefActive: [Function: deprecated],;      active: [Function: deprecated],;      unenroll: [Function: deprecated],;      enroll: [Function: deprecated];    },;    events: <ref *4> [Function: EventEmitter] {;      once: [Function: once],;      on: [Function: on],;      EventEmitter: [Circular *4],;      usingDomains: false,;      captureRejectionSymbol: Symbol(nodejs.rejection),;      captureRejections: [Getter/Setter],;      errorMonitor: Symbol(events.errorMonitor),;      defaultMaxListeners: [Getter/Setter],;      init: [Function (anonymous)],;      listenerCount: [Function (anonymous)];    },;    dns: {;      lookup: [Function: lookup],;      lookupService: [Function: lookupService],;      Resolver: [class Resolver],;      setServers: [Function: defaultResolverSetServers],;      ADDRCONFIG: 1024,;      ALL: 256,;      V4MAPPED: 2048,;      NODATA: 'ENODATA',;      FORMERR: 'EFORMERR',;      SERVFAIL: 'ESERVFAIL',;      NOTFOUND: 'ENOTFOUND',;      NOTIMP: 'ENOTIMP',;      REFUSED: 'EREFUSED',;      BADQUERY: 'EBADQUERY',;      BADNAME: 'EBADNAME',;      BADFAMILY: 'EBADFAMILY',;      BADRESP: 'EBADRESP',;      CONNREFUSED: 'ECONNREFUSED',;      TIMEOUT: 'ETIMEOUT',;      EOF: 'EOF',;      FILE: 'EFILE',;      NOMEM: 'ENOMEM',;      DESTRUCTION: 'EDESTRUCTION',;      BADSTR: 'EBADSTR',;      BADFLAGS: 'EBADFLAGS',;      NONAME: 'ENONAME',;      BADHINTS: 'EBADHINTS',;      NOTINITIALIZED: 'ENOTINITIALIZED',;      LOADIPHLPAPI: 'ELOADIPHLPAPI',;      ADDRGETNETWORKPARAMS: 'EADDRGETNETWORKPARAMS',;      CANCELLED: 'ECANCELLED',;      getServers: [Function: bound getServers],;      resolve: [Function: bound resolve],;      resolve4: [Function: bound queryA],;      resolve6: [Function: bound queryAaaa],;      resolveAny: [Function: bound queryAny],;      resolveCname: [Function: bound queryCname],;      resolveMx: [Function: bound queryMx],;      resolveNaptr: [Function: bound queryNaptr],;      resolveNs: [Function: bound queryNs],;      resolvePtr: [Function: bound queryPtr],;      resolveSoa: [Function: bound querySoa],;      resolveSrv: [Function: bound querySrv],;      resolveTxt: [Function: bound queryTxt],;      reverse: [Function: bound getHostByAddr],;      promises: [Getter];    },;    net: {;      _createServerHandle: [Function: createServerHandle],;      _normalizeArgs: [Function: normalizeArgs],;      _setSimultaneousAccepts: [Function: _setSimultaneousAccepts],;      connect: [Function: connect],;      createConnection: [Function: connect],;      createServer: [Function: createServer],;      isIP: [Function: isIP],;      isIPv4: [Function: isIPv4],;      isIPv6: [Function: isIPv6],;      Server: [Function: Server],;      Socket: [Function: Socket],;      Stream: [Function: Socket];    },;    tls: {;      CLIENT_RENEG_LIMIT: 3,;      CLIENT_RENEG_WINDOW: 600,;      DEFAULT_CIPHERS: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',;      DEFAULT_ECDH_CURVE: 'auto',;      DEFAULT_MIN_VERSION: 'TLSv1.2',;      DEFAULT_MAX_VERSION: 'TLSv1.3',;      getCiphers: [Function (anonymous)],;      rootCertificates: [Getter],;      convertALPNProtocols: [Function: convertALPNProtocols],;      checkServerIdentity: [Function: checkServerIdentity],;      parseCertString: [Function: deprecated],;      createSecureContext: [Function: createSecureContext],;      SecureContext: [Function: SecureContext],;      TLSSocket: [Function: TLSSocket],;      Server: [Function: Server],;      createServer: [Function: createServer],;      connect: [Function: connect],;      createSecurePair: [Function: deprecated];    },;    http: {;      _connectionListener: [Function: connectionListener],;      METHODS: [Array],;      STATUS_CODES: [Object],;      Agent: [Function],;      ClientRequest: [Function: ClientRequest],;      IncomingMessage: [Function: IncomingMessage],;      OutgoingMessage: [Function: OutgoingMessage],;      Server: [Function: Server],;      ServerResponse: [Function: ServerResponse],;      createServer: [Function: createServer],;      validateHeaderName: [Function: hidden],;      validateHeaderValue: [Function: hidden],;      get: [Function: get],;      request: [Function: request],;      maxHeaderSize: [Getter],;      globalAgent: [Getter/Setter];    },;    https: {;      Agent: [Function: Agent],;      globalAgent: [Agent],;      Server: [Function: Server],;      createServer: [Function: createServer],;      get: [Function: get],;      request: [Function: request];    },;    http2: {;      connect: [Function: connect],;      constants: [Object],;      createServer: [Function: createServer],;      createSecureServer: [Function: createSecureServer],;      getDefaultSettings: [Function: getDefaultSettings],;      getPackedSettings: [Function: getPackedSettings],;      getUnpackedSettings: [Function: getUnpackedSettings],;      Http2ServerRequest: [class Http2ServerRequest extends Readable],;      Http2ServerResponse: [class Http2ServerResponse extends Stream];    },;    dgram: {;      _createSocketHandle: [Function: deprecated],;      createSocket: [Function: createSocket],;      Socket: [Function: Socket];    };  },;  npm: {;    ws: [class WebSocket extends EventEmitter] {;      CONNECTING: 0,;      OPEN: 1,;      CLOSING: 2,;      CLOSED: 3,;      createWebSocketStream: [Function: createWebSocketStream],;      Server: [class WebSocketServer extends EventEmitter],;      Receiver: [class Receiver extends Writable],;      Sender: [class Sender];    };  },;  common: {;    config: { Config: [class Config], readConfig: [Function: readConfig] },;    database: { Database: [class Database] },;    logger: {;      Logger: [class Logger extends EventEmitter],;      openLog: [AsyncFunction: openLog];    },;    server: { Server: [class Server] },;    utils: {;      random: [Function: random],;      sample: [Function: sample],;      ipToInt: [Function: ipToInt],;      parseHost: [Function: parseHost],;      replace: [Function: replace],;      fileExt: [Function: fileExt],;      between: [Function: between],;      isFirstUpper: [Function: isFirstUpper],;      toLowerCamel: [Function: toLowerCamel],;      toUpperCamel: [Function: toUpperCamel],;      isConstant: [Function: isConstant],;      nowDate: [Function: nowDate],;      duration: [Function: duration],;      makePrivate: [Function: makePrivate],;      protect: [Function: protect],;      parseCookies: [Function: parseCookies],;      createAbortController: [Function: createAbortController],;      timeout: [Function: timeout],;      delay: [Function: delay],;      secutity: [Object],;      semaphore: [Object],;      loader: [Object],;      concolor: [Function],;      vm: [Object],;      watch: [Object],;      model: [Object],;      schema: [Object];    };  },;  application: {;    worker: { id: 'W3' },;    server: { host: '0.0.0.0', port: 8002, protocol: 'http' },;    auth: Auth {;      characters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',;      secret: 'secret',;      length: 64,;      db: null;    },;    resources: Resources {;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application\\resources',;      application: [Application],;      files: [Map];    },;    introspect: [AsyncFunction (anonymous)];  },;  config: {;    cache: { size: '50mb', maxFileSize: '10mb' },;    database: {;      host: '127.0.0.1',;      port: 5432,;      database: 'application',;      user: 'marcus',;      password: 'marcus';    },;    log: {;      keepDays: 100,;      writeInterval: 3000,;      writeBuffer: 65536,;      toFile: [Array],;      toStdout: [Array];    },;    server: {;      host: '0.0.0.0',;      balancer: 8000,;      protocol: 'http',;      ports: [Array],;      nagle: false,;      timeouts: [Object],;      queue: [Object],;      workers: [Object];    },;    sessions: {;      sid: 'token',;      characters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',;      length: 64,;      secret: 'secret',;      regenerate: 3600000,;      expire: 7200000,;      persistent: true,;      limits: [Object];    };  },;  api: { example: { creat: [AsyncFunction: method] } },;  lib: {},;  domain: {};}
2021-06-02T15:19:37.651Z [log] 127.0.0.1	example/creat
2021-06-02T15:23:01.322Z [debug] createSandbox
2021-06-02T15:23:01.326Z [info] Listen port 8002 in worker 3
2021-06-02T15:23:01.339Z [info] Application started in worker 3
2021-06-02T15:23:02.680Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:23:02.680Z [warn] { url: '/api' }
2021-06-02T15:23:02.682Z [log] {;  callId: 3,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:23:02.682Z [warn] {;  iname: 'example',;  ver: '*',;  methodName: 'creat',;  iface: { '1': { creat: [Procedure] }, default: 1 },;  collection: { example: { '1': [Object], default: 1 } };}
2021-06-02T15:23:02.683Z [debug] {;  version: 1,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:23:02.683Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:23:02.684Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:23:02.684Z [log] { api: { example: { creat: [AsyncFunction: method] } } }
2021-06-02T15:23:02.684Z [log] { domain: {} }
2021-06-02T15:23:02.684Z [log] { lib: {} }
2021-06-02T15:23:02.684Z [log] {;  console: Console {;    _write: [Function (anonymous)],;    _groupIndent: '',;    _counts: Map(0) {},;    _times: Map(0) {};  };}
2021-06-02T15:23:02.686Z [log] 127.0.0.1	example/creat
2021-06-02T15:23:22.351Z [debug] createSandbox
2021-06-02T15:23:22.355Z [info] Listen port 8002 in worker 3
2021-06-02T15:23:22.367Z [info] Application started in worker 3
2021-06-02T15:23:24.956Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:23:24.956Z [warn] { url: '/api' }
2021-06-02T15:23:24.958Z [log] {;  callId: 3,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:23:24.958Z [warn] {;  iname: 'example',;  ver: '*',;  methodName: 'creat',;  iface: { '1': { creat: [Procedure] }, default: 1 },;  collection: { example: { '1': [Object], default: 1 } };}
2021-06-02T15:23:24.958Z [debug] {;  version: 1,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:23:24.959Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:23:24.959Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:23:24.959Z [log] { api: { example: { creat: [AsyncFunction: method] } } }
2021-06-02T15:23:24.959Z [log] { domain: {} }
2021-06-02T15:23:24.959Z [log] { lib: {} }
2021-06-02T15:23:24.960Z [log] {;  console: Console {;    _write: [Function (anonymous)],;    _groupIndent: '',;    _counts: Map(0) {},;    _times: Map(0) {};  };}
2021-06-02T15:23:24.960Z [log] { context: { client: Client { events: [Object], callId: 0 } } }
2021-06-02T15:23:24.962Z [log] 127.0.0.1	example/creat
2021-06-02T15:23:55.315Z [debug] createSandbox
2021-06-02T15:23:55.319Z [info] Listen port 8002 in worker 3
2021-06-02T15:23:55.332Z [info] Application started in worker 3
2021-06-02T15:23:58.140Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:23:58.141Z [warn] { url: '/api' }
2021-06-02T15:23:58.142Z [log] {;  callId: 3,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:23:58.143Z [warn] {;  iname: 'example',;  ver: '*',;  methodName: 'creat',;  iface: { '1': { creat: [Procedure] }, default: 1 },;  collection: { example: { '1': [Object], default: 1 } };}
2021-06-02T15:23:58.143Z [debug] {;  version: 1,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:23:58.144Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:23:58.144Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:23:58.144Z [log] { api: { example: { creat: [AsyncFunction: method] } } }
2021-06-02T15:23:58.144Z [log] { domain: {} }
2021-06-02T15:23:58.144Z [log] { lib: {} }
2021-06-02T15:23:58.144Z [log] {;  console: Console {;    _write: [Function (anonymous)],;    _groupIndent: '',;    _counts: Map(0) {},;    _times: Map(0) {};  };}
2021-06-02T15:23:58.144Z [log] { context: { client: Client { events: [Object], callId: 0 } } }
2021-06-02T15:23:58.145Z [error] 127.0.0.1	POST	/api	500	ReferenceError: sandbox is not defined;  method (\application\api\example.1\creat.js:9:19);  Procedure.invoke (\lib\procedure.js:74:22);  Channel.rpc (\lib\channel.js:221:27);  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T15:23:58.148Z [log] 127.0.0.1	example/creat
2021-06-02T15:23:58.149Z [error] Error [ERR_STREAM_WRITE_AFTER_END]: write after end;  writeAfterEnd (_http_outgoing.js:668:15);  ServerResponse.end (_http_outgoing.js:788:7);  Channel.reply (\lib\channel.js:244:11);  Channel.rpc (\lib\channel.js:228:10);  processTicksAndRejections (internal/process/task_queues.js:93:5)
2021-06-02T15:25:01.596Z [debug] createSandbox
2021-06-02T15:25:01.600Z [info] Listen port 8002 in worker 3
2021-06-02T15:25:01.618Z [info] Application started in worker 3
2021-06-02T15:25:02.753Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:25:02.753Z [warn] { url: '/api' }
2021-06-02T15:25:02.755Z [log] {;  callId: 3,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:25:02.755Z [warn] {;  iname: 'example',;  ver: '*',;  methodName: 'creat',;  iface: { '1': { creat: [Procedure] }, default: 1 },;  collection: { example: { '1': [Object], default: 1 } };}
2021-06-02T15:25:02.755Z [debug] {;  version: 1,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:25:02.756Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:25:02.756Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:25:02.757Z [log] {;  application: {;    worker: { id: 'W3' },;    server: { host: '0.0.0.0', port: 8002, protocol: 'http' },;    auth: Auth {;      characters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',;      secret: 'secret',;      length: 64,;      db: null;    },;    resources: Resources {;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application\\resources',;      application: [Application],;      files: [Map];    },;    introspect: [AsyncFunction (anonymous)];  };}
2021-06-02T15:25:02.757Z [log] { api: { example: { creat: [AsyncFunction: method] } } }
2021-06-02T15:25:02.757Z [log] { domain: {} }
2021-06-02T15:25:02.757Z [log] { lib: {} }
2021-06-02T15:25:02.757Z [log] {;  console: Console {;    _write: [Function (anonymous)],;    _groupIndent: '',;    _counts: Map(0) {},;    _times: Map(0) {};  };}
2021-06-02T15:25:02.757Z [log] { context: { client: Client { events: [Object], callId: 0 } } }
2021-06-02T15:25:02.759Z [log] 127.0.0.1	example/creat
2021-06-02T15:26:49.492Z [debug] createSandbox
2021-06-02T15:26:49.497Z [info] Listen port 8002 in worker 3
2021-06-02T15:26:49.513Z [info] Application started in worker 3
2021-06-02T15:26:52.378Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:26:52.378Z [warn] { url: '/api' }
2021-06-02T15:26:52.380Z [log] {;  callId: 3,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:26:52.380Z [warn] {;  iname: 'example',;  ver: '*',;  methodName: 'creat',;  iface: {;    '1': { creat: [Procedure] },;    '2': { creat: [Procedure] },;    default: 2;  },;  collection: { example: { '1': [Object], '2': [Object], default: 2 } };}
2021-06-02T15:26:52.380Z [debug] {;  version: 2,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:26:52.381Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:26:52.381Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:26:52.381Z [log] {;  application: {;    worker: { id: 'W3' },;    server: { host: '0.0.0.0', port: 8002, protocol: 'http' },;    auth: Auth {;      characters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',;      secret: 'secret',;      length: 64,;      db: null;    },;    resources: Resources {;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application\\resources',;      application: [Application],;      files: [Map];    },;    introspect: [AsyncFunction (anonymous)];  };}
2021-06-02T15:26:52.382Z [log] { api: { example: { creat: [AsyncFunction: method] } } }
2021-06-02T15:26:52.382Z [log] { domain: {} }
2021-06-02T15:26:52.382Z [log] { lib: {} }
2021-06-02T15:26:52.382Z [log] {;  console: Console {;    _write: [Function (anonymous)],;    _groupIndent: '',;    _counts: Map(0) {},;    _times: Map(0) {};  };}
2021-06-02T15:26:52.382Z [log] { context: { client: Client { events: [Object], callId: 0 } } }
2021-06-02T15:26:52.382Z [debug] example.2 creat
2021-06-02T15:26:52.384Z [log] 127.0.0.1	example/creat
2021-06-02T15:27:03.730Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:27:03.730Z [warn] { url: '/api' }
2021-06-02T15:27:03.730Z [log] {;  callId: 3,;  interfaceName: 'example.2',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:27:03.730Z [warn] {;  iname: 'example',;  ver: '2',;  methodName: 'creat',;  iface: {;    '1': { creat: [Procedure] },;    '2': { creat: [Procedure] },;    default: 2;  },;  collection: { example: { '1': [Object], '2': [Object], default: 2 } };}
2021-06-02T15:27:03.730Z [debug] {;  version: 2,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:27:03.731Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:27:03.731Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:27:03.731Z [log] {;  application: {;    worker: { id: 'W3' },;    server: { host: '0.0.0.0', port: 8002, protocol: 'http' },;    auth: Auth {;      characters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',;      secret: 'secret',;      length: 64,;      db: null;    },;    resources: Resources {;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application\\resources',;      application: [Application],;      files: [Map];    },;    introspect: [AsyncFunction (anonymous)];  };}
2021-06-02T15:27:03.731Z [log] { api: { example: { creat: [AsyncFunction: method] } } }
2021-06-02T15:27:03.731Z [log] { domain: {} }
2021-06-02T15:27:03.731Z [log] { lib: {} }
2021-06-02T15:27:03.731Z [log] {;  console: Console {;    _write: [Function (anonymous)],;    _groupIndent: '',;    _counts: Map(0) {},;    _times: Map(0) {};  };}
2021-06-02T15:27:03.731Z [log] { context: { client: Client { events: [Object], callId: 0 } } }
2021-06-02T15:27:03.731Z [debug] example.2 creat
2021-06-02T15:27:03.732Z [log] 127.0.0.1	example.2/creat
2021-06-02T15:27:12.595Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:27:12.595Z [warn] { url: '/api' }
2021-06-02T15:27:12.595Z [log] {;  callId: 3,;  interfaceName: 'example',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:27:12.595Z [warn] {;  iname: 'example',;  ver: '*',;  methodName: 'creat',;  iface: {;    '1': { creat: [Procedure] },;    '2': { creat: [Procedure] },;    default: 2;  },;  collection: { example: { '1': [Object], '2': [Object], default: 2 } };}
2021-06-02T15:27:12.595Z [debug] {;  version: 2,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:27:12.595Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:27:12.596Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:27:12.596Z [log] {;  application: {;    worker: { id: 'W3' },;    server: { host: '0.0.0.0', port: 8002, protocol: 'http' },;    auth: Auth {;      characters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',;      secret: 'secret',;      length: 64,;      db: null;    },;    resources: Resources {;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application\\resources',;      application: [Application],;      files: [Map];    },;    introspect: [AsyncFunction (anonymous)];  };}
2021-06-02T15:27:12.596Z [log] { api: { example: { creat: [AsyncFunction: method] } } }
2021-06-02T15:27:12.596Z [log] { domain: {} }
2021-06-02T15:27:12.596Z [log] { lib: {} }
2021-06-02T15:27:12.596Z [log] {;  console: Console {;    _write: [Function (anonymous)],;    _groupIndent: '',;    _counts: Map(0) {},;    _times: Map(0) {};  };}
2021-06-02T15:27:12.596Z [log] { context: { client: Client { events: [Object], callId: 0 } } }
2021-06-02T15:27:12.596Z [debug] example.2 creat
2021-06-02T15:27:12.596Z [log] 127.0.0.1	example/creat
2021-06-02T15:27:19.963Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:27:19.963Z [warn] { url: '/api' }
2021-06-02T15:27:19.963Z [log] {;  callId: 3,;  interfaceName: 'example.1',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:27:19.964Z [warn] {;  iname: 'example',;  ver: '1',;  methodName: 'creat',;  iface: {;    '1': { creat: [Procedure] },;    '2': { creat: [Procedure] },;    default: 2;  },;  collection: { example: { '1': [Object], '2': [Object], default: 2 } };}
2021-06-02T15:27:19.964Z [debug] {;  version: 1,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:27:19.964Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:27:19.964Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:27:19.964Z [log] {;  application: {;    worker: { id: 'W3' },;    server: { host: '0.0.0.0', port: 8002, protocol: 'http' },;    auth: Auth {;      characters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',;      secret: 'secret',;      length: 64,;      db: null;    },;    resources: Resources {;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application\\resources',;      application: [Application],;      files: [Map];    },;    introspect: [AsyncFunction (anonymous)];  };}
2021-06-02T15:27:19.964Z [log] { api: { example: { creat: [AsyncFunction: method] } } }
2021-06-02T15:27:19.964Z [log] { domain: {} }
2021-06-02T15:27:19.965Z [log] { lib: {} }
2021-06-02T15:27:19.965Z [log] {;  console: Console {;    _write: [Function (anonymous)],;    _groupIndent: '',;    _counts: Map(0) {},;    _times: Map(0) {};  };}
2021-06-02T15:27:19.965Z [log] { context: { client: Client { events: [Object], callId: 0 } } }
2021-06-02T15:27:19.965Z [log] 127.0.0.1	example.1/creat
2021-06-02T15:27:45.547Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:27:45.547Z [warn] { url: '/api' }
2021-06-02T15:27:45.548Z [log] { callId: 2, interfaceName: 'users', methodName: 'get', args: {} }
2021-06-02T15:27:45.548Z [warn] {;  iname: 'users',;  ver: '*',;  methodName: 'get',;  iface: undefined,;  collection: { example: { '1': [Object], '2': [Object], default: 2 } };}
2021-06-02T15:27:45.548Z [error] 127.0.0.1	POST	/api	404	Not Found
2021-06-02T15:33:22.918Z [debug] createSandbox
2021-06-02T15:33:22.923Z [info] Listen port 8002 in worker 3
2021-06-02T15:33:22.936Z [info] Application started in worker 3
2021-06-02T15:33:32.634Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:33:32.634Z [warn] { url: '/api' }
2021-06-02T15:33:32.636Z [log] { callId: 2, interfaceName: 'users', methodName: 'get', args: {} }
2021-06-02T15:33:32.636Z [warn] {;  iname: 'users',;  ver: '*',;  methodName: 'get',;  iface: undefined,;  collection: { example: { '1': [Object], '2': [Object], default: 2 } };}
2021-06-02T15:33:32.637Z [error] 127.0.0.1	POST	/api	404	Not Found
2021-06-02T15:34:11.167Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:34:11.167Z [warn] { url: '/api' }
2021-06-02T15:34:11.168Z [log] {;  callId: 3,;  interfaceName: 'example.1',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:34:11.168Z [warn] {;  iname: 'example',;  ver: '1',;  methodName: 'creat',;  iface: {;    '1': { creat: [Procedure] },;    '2': { creat: [Procedure] },;    default: 2;  },;  collection: { example: { '1': [Object], '2': [Object], default: 2 } };}
2021-06-02T15:34:11.168Z [debug] {;  version: 1,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:34:11.169Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:34:11.169Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:34:11.170Z [log] {;  application: {;    worker: { id: 'W3' },;    server: { host: '0.0.0.0', port: 8002, protocol: 'http' },;    auth: Auth {;      characters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',;      secret: 'secret',;      length: 64,;      db: null;    },;    resources: Resources {;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application\\resources',;      application: [Application],;      files: [Map];    },;    introspect: [AsyncFunction (anonymous)];  };}
2021-06-02T15:34:11.170Z [log] { api: { example: { creat: [AsyncFunction: method] } } }
2021-06-02T15:34:11.170Z [log] { domain: {} }
2021-06-02T15:34:11.170Z [log] { lib: {} }
2021-06-02T15:34:11.170Z [log] {;  console: Console {;    _write: [Function (anonymous)],;    _groupIndent: '',;    _counts: Map(0) {},;    _times: Map(0) {};  };}
2021-06-02T15:34:11.170Z [log] { context: { client: Client { events: [Object], callId: 0 } } }
2021-06-02T15:34:11.170Z [log] 127.0.0.1	example.1/creat
2021-06-02T15:34:33.142Z [debug] createSandbox
2021-06-02T15:34:33.148Z [info] Listen port 8002 in worker 3
2021-06-02T15:34:33.162Z [info] Application started in worker 3
2021-06-02T15:34:49.458Z [info] Listen port 8002 in worker 3
2021-06-02T15:34:49.474Z [info] Application started in worker 3
2021-06-02T15:34:57.878Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:34:57.878Z [warn] { url: '/api' }
2021-06-02T15:34:57.880Z [log] {;  callId: 3,;  interfaceName: 'example.1',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:34:57.880Z [warn] {;  iname: 'example',;  ver: '1',;  methodName: 'creat',;  iface: {;    '1': { creat: [Procedure] },;    '2': { creat: [Procedure] },;    default: 2;  },;  collection: { example: { '1': [Object], '2': [Object], default: 2 } };}
2021-06-02T15:34:57.880Z [debug] {;  version: 1,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:34:57.881Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Object],;      domain: [Object],;      starts: [],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:34:57.881Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:34:57.882Z [log] {;  application: {;    worker: { id: 'W3' },;    server: { host: '0.0.0.0', port: 8002, protocol: 'http' },;    auth: Auth {;      characters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',;      secret: 'secret',;      length: 64,;      db: null;    },;    resources: Resources {;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application\\resources',;      application: [Application],;      files: [Map];    },;    introspect: [AsyncFunction (anonymous)];  };}
2021-06-02T15:34:57.882Z [log] { api: { example: { creat: [AsyncFunction: method] } } }
2021-06-02T15:34:57.882Z [log] { domain: {} }
2021-06-02T15:34:57.882Z [log] { lib: {} }
2021-06-02T15:34:57.882Z [log] {;  console: Console {;    _write: [Function (anonymous)],;    _groupIndent: '',;    _counts: Map(0) {},;    _times: Map(0) {};  };}
2021-06-02T15:34:57.882Z [log] { context: { client: Client { events: [Object], callId: 0 } } }
2021-06-02T15:34:57.885Z [log] 127.0.0.1	example.1/creat
2021-06-02T15:35:24.643Z [info] Listen port 8002 in worker 3
2021-06-02T15:35:24.670Z [debug] Start example plugin
2021-06-02T15:35:24.672Z [debug] { set: { key: 'keyName', val: 100 } }
2021-06-02T15:35:24.673Z [debug] { get: 'keyName', return: 100 }
2021-06-02T15:35:24.673Z [debug] { res: 100, cache: undefined }
2021-06-02T15:35:24.673Z [log] [domain/start] example
2021-06-02T15:35:24.673Z [info] Application started in worker 3
2021-06-02T15:35:34.532Z [debug] { client: Client { events: { close: [] }, callId: 0 } }
2021-06-02T15:35:34.533Z [warn] { url: '/api' }
2021-06-02T15:35:34.534Z [log] {;  callId: 3,;  interfaceName: 'example.1',;  methodName: 'creat',;  args: { example: 'example' };}
2021-06-02T15:35:34.535Z [warn] {;  iname: 'example',;  ver: '1',;  methodName: 'creat',;  iface: {;    '1': { creat: [Procedure] },;    '2': { creat: [Procedure] },;    default: 2;  },;  collection: { example: { '1': [Object], '2': [Object], default: 2 } };}
2021-06-02T15:35:34.535Z [debug] {;  version: 1,;  methods: {;    creat: Procedure {;      exports: [Object],;      script: [Function (anonymous)],;      application: [Application],;      method: [AsyncFunction: method],;      parameters: null,;      returns: null,;      semaphore: null,;      caption: '',;      description: '',;      access: 'public',;      validate: null,;      timeout: 0,;      sirializer: null,;      protocols: null,;      deprecated: false,;      assert: null,;      examples: null;    };  };}
2021-06-02T15:35:34.536Z [debug] {;  proc: Procedure {;    exports: { access: 'public', method: [AsyncFunction: method] },;    script: [Function (anonymous)],;    application: Application {;      _events: [Object: null prototype] {},;      _eventsCount: 0,;      _maxListeners: undefined,;      initialization: false,;      finalization: false,;      root: 'C:\\Users\\user\\Desktop\\tests\\server\\v6',;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application',;      api: [Interfaces],;      static: [Resources],;      resources: [Resources],;      lib: [Modules],;      domain: [Modules],;      starts: [Array],;      Application: [class Application extends EventEmitter],;      Error: [class Error extends Error],;      cert: null,;      config: [Object],;      logger: [Logger],;      console: [Console],;      auth: [Auth],;      watcher: [DirectoryWatcher],;      server: [Server],;      sandbox: [Object],;      [Symbol(kCapture)]: false;    },;    method: [AsyncFunction: method],;    parameters: null,;    returns: null,;    semaphore: null,;    caption: '',;    description: '',;    access: 'public',;    validate: null,;    timeout: 0,;    sirializer: null,;    protocols: null,;    deprecated: false,;    assert: null,;    examples: null;  };}
2021-06-02T15:35:34.536Z [log] {;  context: { client: Client { events: [Object], callId: 0 } },;  args: { example: 'example' };}
2021-06-02T15:35:34.536Z [log] {;  application: {;    worker: { id: 'W3' },;    server: { host: '0.0.0.0', port: 8002, protocol: 'http' },;    auth: Auth {;      characters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',;      secret: 'secret',;      length: 64,;      db: [Database];    },;    resources: Resources {;      path: 'C:\\Users\\user\\Desktop\\tests\\server\\v6\\application\\resources',;      application: [Application],;      files: [Map];    },;    introspect: [AsyncFunction (anonymous)];  };}
2021-06-02T15:35:34.536Z [log] { api: { example: { creat: [AsyncFunction: method] } } }
2021-06-02T15:35:34.537Z [log] {;  domain: {;    database: { start: [Function: bound ] AsyncFunction },;    example: { start: [Function: bound ] AsyncFunction },;    db: Database { pool: [BoundPool], logger: [Console] };  };}
2021-06-02T15:35:34.537Z [log] {;  lib: {;    example: { cache: [Object], start: [Function: bound method] AsyncFunction },;    utils: {;      UNITS: [Array],;      bytesToSize: [Function: bound bytesToSize],;      UNIT_SIZES: [Object],;      sizeToBytes: [Function: bound sizeToBytes];    };  };}
2021-06-02T15:35:34.537Z [log] {;  console: Console {;    _write: [Function (anonymous)],;    _groupIndent: '',;    _counts: Map(0) {},;    _times: Map(0) {};  };}
2021-06-02T15:35:34.537Z [log] { context: { client: Client { events: [Object], callId: 0 } } }
2021-06-02T15:35:34.539Z [log] 127.0.0.1	example.1/creat
