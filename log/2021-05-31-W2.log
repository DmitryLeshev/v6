2021-05-31T14:40:03.486Z [debug] startWatch
2021-05-31T14:40:03.486Z [debug] createSandbox
2021-05-31T14:40:03.486Z [info] Application started in worker 2
2021-05-31T14:40:03.488Z [info] Listen port 8001 in worker 2
2021-05-31T14:41:03.518Z [debug] startWatch
2021-05-31T14:41:03.519Z [debug] createSandbox
2021-05-31T14:41:03.519Z [info] Application started in worker 2
2021-05-31T14:41:03.522Z [info] Listen port 8001 in worker 2
2021-05-31T14:41:12.820Z [debug] startWatch
2021-05-31T14:41:12.821Z [debug] createSandbox
2021-05-31T14:41:12.822Z [info] Application started in worker 2
2021-05-31T14:41:12.824Z [info] Listen port 8001 in worker 2
2021-05-31T14:42:07.482Z [debug] createSandbox
2021-05-31T14:42:07.482Z [info] Application started in worker 2
2021-05-31T14:42:07.484Z [info] Listen port 8001 in worker 2
2021-05-31T14:46:05.706Z [debug] createSandbox
2021-05-31T14:46:05.707Z [info] Application started in worker 2
2021-05-31T14:46:05.710Z [info] Listen port 8001 in worker 2
2021-05-31T14:47:51.792Z [debug] createSandbox
2021-05-31T14:47:51.794Z [info] Application started in worker 2
2021-05-31T14:47:51.796Z [info] Listen port 8001 in worker 2
2021-05-31T14:48:19.284Z [debug] createSandbox
2021-05-31T14:48:19.326Z [warn] {;  Buffer: [Function: Buffer] {;    poolSize: 8192,;    from: [Function: from],;    of: [Function: of],;    alloc: [Function: alloc],;    allocUnsafe: [Function: allocUnsafe],;    allocUnsafeSlow: [Function: allocUnsafeSlow],;    isBuffer: [Function: isBuffer],;    compare: [Function: compare],;    isEncoding: [Function: isEncoding],;    concat: [Function: concat],;    byteLength: [Function: byteLength],;    [Symbol(kIsEncodingSymbol)]: [Function: isEncoding];  },;  URL: [class URL],;  URLSearchParams: [class URLSearchParams],;  TextDecoder: [class TextDecoder],;  TextEncoder: [class TextEncoder],;  console: Console {;    _write: [Function (anonymous)],;    _groupIndent: '',;    _counts: Map(0) {},;    _times: Map(0) {};  },;  queueMicrotask: [Function: queueMicrotask],;  setTimeout: [Function: setTimeout] {;    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)];  },;  setImmediate: [Function: setImmediate] {;    [Symbol(nodejs.util.promisify.custom)]: [Function (anonymous)];  },;  setInterval: [Function: setInterval],;  clearTimeout: [Function: clearTimeout],;  clearImmediate: [Function: clearImmediate],;  clearInterval: [Function: clearInterval],;  Error: [class Error extends Error],;  node: {;    process: process {;      version: 'v14.15.0',;      versions: [Object],;      arch: 'x64',;      platform: 'win32',;      release: [Object],;      _rawDebug: [Function: _rawDebug],;      moduleLoadList: [Array],;      binding: [Function: binding],;      _linkedBinding: [Function: _linkedBinding],;      _events: [Object: null prototype],;      _eventsCount: 3,;      _maxListeners: undefined,;      domain: null,;      _exiting: false,;      config: [Object],;      dlopen: [Function: dlopen],;      uptime: [Function: uptime],;      _getActiveRequests: [Function: _getActiveRequests],;      _getActiveHandles: [Function: _getActiveHandles],;      reallyExit: [Function: reallyExit],;      _kill: [Function: _kill],;      hrtime: [Function],;      cpuUsage: [Function: cpuUsage],;      resourceUsage: [Function: resourceUsage],;      memoryUsage: [Function: memoryUsage],;      kill: [Function: kill],;      exit: [Function: exit],;      openStdin: [Function (anonymous)],;      allowedNodeEnvironmentFlags: [Getter/Setter],;      assert: [Function: deprecated],;      features: [Object],;      _fatalException: [Function: workerOnGlobalUncaughtException],;      setUncaughtExceptionCaptureCallback: [Function: setUncaughtExceptionCaptureCallback],;      hasUncaughtExceptionCaptureCallback: [Function: hasUncaughtExceptionCaptureCallback],;      emitWarning: [Function: emitWarning],;      nextTick: [Function: nextTick],;      _tickCallback: [Function: runNextTicks],;      stdout: [Getter],;      stdin: [Getter],;      stderr: [Getter],;      abort: [Function],;      chdir: [Function],;      umask: [Function: wrappedUmask],;      cwd: [Function (anonymous)],;      env: [Object],;      title: 'npm start',;      argv: [Array],;      execArgv: [],;      pid: 14164,;      ppid: 30852,;      execPath: 'C:\\Program Files\\nodejs\\node.exe',;      debugPort: 9229,;      argv0: 'node',;      _preload_modules: [],;      mainModule: [Module],;      [Symbol(kCapture)]: false;    },;    util: {;      _errnoException: [Function: errnoException],;      _exceptionWithHostPort: [Function: exceptionWithHostPort],;      _extend: [Function: _extend],;      callbackify: [Function: callbackify],;      debug: [Function: debuglog],;      debuglog: [Function: debuglog],;      deprecate: [Function: deprecate],;      format: [Function: format],;      formatWithOptions: [Function: formatWithOptions],;      getSystemErrorName: [Function: getSystemErrorName],;      inherits: [Function: inherits],;      inspect: [Function],;      isArray: [Function: isArray],;      isBoolean: [Function: isBoolean],;      isBuffer: [Function: isBuffer],;      isDeepStrictEqual: [Function: isDeepStrictEqual],;      isNull: [Function: isNull],;      isNullOrUndefined: [Function: isNullOrUndefined],;      isNumber: [Function: isNumber],;      isString: [Function: isString],;      isSymbol: [Function: isSymbol],;      isUndefined: [Function: isUndefined],;      isRegExp: [Function: isRegExp],;      isObject: [Function: isObject],;      isDate: [Function: isDate],;      isError: [Function: isError],;      isFunction: [Function: isFunction],;      isPrimitive: [Function: isPrimitive],;      log: [Function: log],;      promisify: [Function],;      TextDecoder: [class TextDecoder],;      TextEncoder: [class TextEncoder],;      types: [Object];    },;    childProcess: {;      _forkChild: [Function: _forkChild],;      ChildProcess: [Function: ChildProcess],;      exec: [Function: exec],;      execFile: [Function: execFile],;      execFileSync: [Function: execFileSync],;      execSync: [Function: execSync],;      fork: [Function: fork],;      spawn: [Function: spawn],;      spawnSync: [Function: spawnSync];    },;    worker: {;      isMainThread: false,;      MessagePort: [Function: MessagePort],;      MessageChannel: [Function: MessageChannel],;      markAsUntransferable: [Function: markAsUntransferable],;      moveMessagePortToContext: [Function: moveMessagePortToContext],;      receiveMessageOnPort: [Function: receiveMessageOnPort],;      resourceLimits: [Object],;      threadId: 2,;      SHARE_ENV: Symbol(nodejs.worker_threads.SHARE_ENV),;      Worker: [class Worker extends EventEmitter],;      parentPort: [MessagePort [EventTarget]],;      workerData: undefined;    },;    os: {;      arch: [Function],;      cpus: [Function: cpus],;      endianness: [Function],;      freemem: [Function],;      getPriority: [Function: getPriority],;      homedir: [Function],;      hostname: [Function],;      loadavg: [Function: loadavg],;      networkInterfaces: [Function: networkInterfaces],;      platform: [Function],;      release: [Function],;      setPriority: [Function: setPriority],;      tmpdir: [Function],;      totalmem: [Function],;      type: [Function],;      userInfo: [Function: userInfo],;      uptime: [Function],;      version: [Function],;      constants: [Object: null prototype],;      EOL: '\r\n';    },;    v8: {;      cachedDataVersionTag: [Function: cachedDataVersionTag],;      getHeapSnapshot: [Function: getHeapSnapshot],;      getHeapStatistics: [Function: getHeapStatistics],;      getHeapSpaceStatistics: [Function: getHeapSpaceStatistics],;      getHeapCodeStatistics: [Function: getHeapCodeStatistics],;      setFlagsFromString: [Function: setFlagsFromString],;      Serializer: [class Serializer extends Serializer],;      Deserializer: [class Deserializer extends Deserializer],;      DefaultSerializer: [class DefaultSerializer extends Serializer],;      DefaultDeserializer: [class DefaultDeserializer extends Deserializer],;      deserialize: [Function: deserialize],;      serialize: [Function: serialize],;      writeHeapSnapshot: [Function: writeHeapSnapshot];    },;    vm: {;      Script: [class Script extends ContextifyScript],;      createContext: [Function: createContext],;      createScript: [Function: createScript],;      runInContext: [Function: runInContext],;      runInNewContext: [Function: runInNewContext],;      runInThisContext: [Function: runInThisContext],;      isContext: [Function: isContext],;      compileFunction: [Function: compileFunction],;      measureMemory: [Function: measureMemory];    },;    path: <ref *1> {;      resolve: [Function: resolve],;      normalize: [Function: normalize],;      isAbsolute: [Function: isAbsolute],;      join: [Function: join],;      relative: [Function: relative],;      toNamespacedPath: [Function: toNamespacedPath],;      dirname: [Function: dirname],;      basename: [Function: basename],;      extname: [Function: extname],;      format: [Function: bound _format],;      parse: [Function: parse],;      sep: '\\',;      delimiter: ';',;      win32: [Circular *1],;      posix: [Object],;      _makeLong: [Function: toNamespacedPath];    },;    url: {;      Url: [Function: Url],;      parse: [Function: urlParse],;      resolve: [Function: urlResolve],;      resolveObject: [Function: urlResolveObject],;      format: [Function: urlFormat],;      URL: [class URL],;      URLSearchParams: [class URLSearchParams],;      domainToASCII: [Function: domainToASCII],;      domainToUnicode: [Function: domainToUnicode],;      pathToFileURL: [Function: pathToFileURL],;      fileURLToPath: [Function: fileURLToPath];    },;    StringDecoder: { StringDecoder: [Function: StringDecoder] },;    querystring: {;      unescapeBuffer: [Function: unescapeBuffer],;      unescape: [Function: qsUnescape],;      escape: [Function: qsEscape],;      stringify: [Function: stringify],;      encode: [Function: stringify],;      parse: [Function: parse],;      decode: [Function: parse];    },;    assert: <ref *2> [Function: ok] {;      fail: [Function: fail],;      AssertionError: [class AssertionError extends Error],;      ok: [Circular *2],;      equal: [Function: equal],;      notEqual: [Function: notEqual],;      deepEqual: [Function: deepEqual],;      notDeepEqual: [Function: notDeepEqual],;      deepStrictEqual: [Function: deepStrictEqual],;      notDeepStrictEqual: [Function: notDeepStrictEqual],;      strictEqual: [Function: strictEqual],;      notStrictEqual: [Function: notStrictEqual],;      throws: [Function: throws],;      rejects: [AsyncFunction: rejects],;      doesNotThrow: [Function: doesNotThrow],;      doesNotReject: [AsyncFunction: doesNotReject],;      ifError: [Function: ifError],;      match: [Function: match],;      doesNotMatch: [Function: doesNotMatch],;      CallTracker: [class CallTracker],;      strict: [Function];    },;    stream: <ref *3> [Function: Stream] {;      Readable: [Function],;      Writable: [Function],;      Duplex: [Function: Duplex],;      Transform: [Function: Transform],;      PassThrough: [Function: PassThrough],;      pipeline: [Function: pipeline],;      finished: [Function: eos],;      Stream: [Circular *3],;      _isUint8Array: [Function: isUint8Array],;      _uint8ArrayToBuffer: [Function: _uint8ArrayToBuffer];    },;    fs: {;      appendFile: [Function: appendFile],;      appendFileSync: [Function: appendFileSync],;      access: [Function: access],;      accessSync: [Function: accessSync],;      chown: [Function: chown],;      chownSync: [Function: chownSync],;      chmod: [Function: chmod],;      chmodSync: [Function: chmodSync],;      close: [Function: close],;      closeSync: [Function: closeSync],;      copyFile: [Function: copyFile],;      copyFileSync: [Function: copyFileSync],;      createReadStream: [Function: createReadStream],;      createWriteStream: [Function: createWriteStream],;      exists: [Function: exists],;      existsSync: [Function: existsSync],;      fchown: [Function: fchown],;      fchownSync: [Function: fchownSync],;      fchmod: [Function: fchmod],;      fchmodSync: [Function: fchmodSync],;      fdatasync: [Function: fdatasync],;      fdatasyncSync: [Function: fdatasyncSync],;      fstat: [Function: fstat],;      fstatSync: [Function: fstatSync],;      fsync: [Function: fsync],;      fsyncSync: [Function: fsyncSync],;      ftruncate: [Function: ftruncate],;      ftruncateSync: [Function: ftruncateSync],;      futimes: [Function: futimes],;      futimesSync: [Function: futimesSync],;      lchown: [Function: lchown],;      lchownSync: [Function: lchownSync],;      lchmod: undefined,;      lchmodSync: undefined,;      link: [Function: link],;      linkSync: [Function: linkSync],;      lstat: [Function: lstat],;      lstatSync: [Function: lstatSync],;      lutimes: [Function: lutimes],;      lutimesSync: [Function: lutimesSync],;      mkdir: [Function: mkdir],;      mkdirSync: [Function: mkdirSync],;      mkdtemp: [Function: mkdtemp],;      mkdtempSync: [Function: mkdtempSync],;      open: [Function: open],;      openSync: [Function: openSync],;      opendir: [Function: opendir],;      opendirSync: [Function: opendirSync],;      readdir: [Function: readdir],;      readdirSync: [Function: readdirSync],;      read: [Function: read],;      readSync: [Function: readSync],;      readv: [Function: readv],;      readvSync: [Function: readvSync],;      readFile: [Function: readFile],;      readFileSync: [Function: readFileSync],;      readlink: [Function: readlink],;      readlinkSync: [Function: readlinkSync],;      realpath: [Function],;      realpathSync: [Function],;      rename: [Function: rename],;      renameSync: [Function: renameSync],;      rm: [Function: rm],;      rmSync: [Function: rmSync],;      rmdir: [Function: rmdir],;      rmdirSync: [Function: rmdirSync],;      stat: [Function: stat],;      statSync: [Function: statSync],;      symlink: [Function: symlink],;      symlinkSync: [Function: symlinkSync],;      truncate: [Function: truncate],;      truncateSync: [Function: truncateSync],;      unwatchFile: [Function: unwatchFile],;      unlink: [Function: unlink],;      unlinkSync: [Function: unlinkSync],;      utimes: [Function: utimes],;      utimesSync: [Function: utimesSync],;      watch: [Function: watch],;      watchFile: [Function: watchFile],;      writeFile: [Function: writeFile],;      writeFileSync: [Function: writeFileSync],;      write: [Function: write],;      writeSync: [Function: writeSync],;      writev: [Function: writev],;      writevSync: [Function: writevSync],;      Dir: [class Dir],;      Dirent: [class Dirent],;      Stats: [Function: Stats],;      ReadStream: [Getter/Setter],;      WriteStream: [Getter/Setter],;      FileReadStream: [Getter/Setter],;      FileWriteStream: [Getter/Setter],;      _toUnixTimestamp: [Function: toUnixTimestamp],;      F_OK: 0,;      R_OK: 4,;      W_OK: 2,;      X_OK: 1,;      constants: [Object: null prototype],;      promises: [Getter];    },;    fsp: {;      access: [AsyncFunction: access],;      copyFile: [AsyncFunction: copyFile],;      open: [AsyncFunction: open],;      opendir: [Function: opendir],;      rename: [AsyncFunction: rename],;      truncate: [AsyncFunction: truncate],;      rm: [AsyncFunction: rm],;      rmdir: [AsyncFunction: rmdir],;      mkdir: [AsyncFunction: mkdir],;      readdir: [AsyncFunction: readdir],;      readlink: [AsyncFunction: readlink],;      symlink: [AsyncFunction: symlink],;      lstat: [AsyncFunction: lstat],;      stat: [AsyncFunction: stat],;      link: [AsyncFunction: link],;      unlink: [AsyncFunction: unlink],;      chmod: [AsyncFunction: chmod],;      lchmod: [AsyncFunction: lchmod],;      lchown: [AsyncFunction: lchown],;      chown: [AsyncFunction: chown],;      utimes: [AsyncFunction: utimes],;      lutimes: [AsyncFunction: lutimes],;      realpath: [AsyncFunction: realpath],;      mkdtemp: [AsyncFunction: mkdtemp],;      writeFile: [AsyncFunction: writeFile],;      appendFile: [AsyncFunction: appendFile],;      readFile: [AsyncFunction: readFile];    },;    crypto: {;      createCipheriv: [Function: createCipheriv],;      createDecipheriv: [Function: createDecipheriv],;      createDiffieHellman: [Function: createDiffieHellman],;      createDiffieHellmanGroup: [Function: createDiffieHellmanGroup],;      createECDH: [Function: createECDH],;      createHash: [Function: createHash],;      createHmac: [Function: createHmac],;      createPrivateKey: [Function: createPrivateKey],;      createPublicKey: [Function: createPublicKey],;      createSecretKey: [Function: createSecretKey],;      createSign: [Function: createSign],;      createVerify: [Function: createVerify],;      diffieHellman: [Function: diffieHellman],;      getCiphers: [Function (anonymous)],;      getCurves: [Function (anonymous)],;      getDiffieHellman: [Function: createDiffieHellmanGroup],;      getHashes: [Function (anonymous)],;      pbkdf2: [Function: pbkdf2],;      pbkdf2Sync: [Function: pbkdf2Sync],;      generateKeyPair: [Function: generateKeyPair],;      generateKeyPairSync: [Function: generateKeyPairSync],;      privateDecrypt: [Function (anonymous)],;      privateEncrypt: [Function (anonymous)],;      publicDecrypt: [Function (anonymous)],;      publicEncrypt: [Function (anonymous)],;      randomBytes: [Function: randomBytes],;      randomFill: [Function: randomFill],;      randomFillSync: [Function: randomFillSync],;      randomInt: [Function: randomInt],;      scrypt: [Function: scrypt],;      scryptSync: [Function: scryptSync],;      sign: [Function: signOneShot],;      setEngine: [Function: setEngine],;      timingSafeEqual: [Function: timingSafeEqual],;      getFips: [Function: getFipsDisabled],;      setFips: [Function: setFipsDisabled],;      verify: [Function: verifyOneShot],;      Certificate: [Function],;      Cipher: [Function: Cipher],;      Cipheriv: [Function: Cipheriv],;      Decipher: [Function: Decipher],;      Decipheriv: [Function: Decipheriv],;      DiffieHellman: [Function: DiffieHellman],;      DiffieHellmanGroup: [Function: DiffieHellmanGroup],;      ECDH: [Function],;      Hash: [Function: Hash],;      Hmac: [Function: Hmac],;      KeyObject: [class KeyObject],;      Sign: [Function: Sign],;      Verify: [Function: Verify],;      constants: [Object: null prototype];    },;    zlib: {;      Deflate: [Function: Deflate],;      Inflate: [Function: Inflate],;      Gzip: [Function: Gzip],;      Gunzip: [Function: Gunzip],;      DeflateRaw: [Function: DeflateRaw],;      InflateRaw: [Function: InflateRaw],;      Unzip: [Function: Unzip],;      BrotliCompress: [Function: BrotliCompress],;      BrotliDecompress: [Function: BrotliDecompress],;      deflate: [Function: asyncBufferWrapper],;      deflateSync: [Function: syncBufferWrapper],;      gzip: [Function: asyncBufferWrapper],;      gzipSync: [Function: syncBufferWrapper],;      deflateRaw: [Function: asyncBufferWrapper],;      deflateRawSync: [Function: syncBufferWrapper],;      unzip: [Function: asyncBufferWrapper],;      unzipSync: [Function: syncBufferWrapper],;      inflate: [Function: asyncBufferWrapper],;      inflateSync: [Function: syncBufferWrapper],;      gunzip: [Function: asyncBufferWrapper],;      gunzipSync: [Function: syncBufferWrapper],;      inflateRaw: [Function: asyncBufferWrapper],;      inflateRawSync: [Function: syncBufferWrapper],;      brotliCompress: [Function: asyncBufferWrapper],;      brotliCompressSync: [Function: syncBufferWrapper],;      brotliDecompress: [Function: asyncBufferWrapper],;      brotliDecompressSync: [Function: syncBufferWrapper],;      createDeflate: [Function: value],;      createInflate: [Function: value],;      createDeflateRaw: [Function: value],;      createInflateRaw: [Function: value],;      createGzip: [Function: value],;      createGunzip: [Function: value],;      createUnzip: [Function: value],;      createBrotliCompress: [Function: value],;      createBrotliDecompress: [Function: value],;      constants: [Object: null prototype],;      codes: [Object];    },;    readline: {;      Interface: [Function: Interface],;      clearLine: [Function: clearLine],;      clearScreenDown: [Function: clearScreenDown],;      createInterface: [Function: createInterface],;      cursorTo: [Function: cursorTo],;      emitKeypressEvents: [Function: emitKeypressEvents],;      moveCursor: [Function: moveCursor];    },;    perfHooks: {;      performance: [Object],;      PerformanceObserver: [class PerformanceObserver extends AsyncResource],;      monitorEventLoopDelay: [Function: monitorEventLoopDelay],;      constants: [Object];    },;    asyncHooks: {;      AsyncLocalStorage: [class AsyncLocalStorage],;      createHook: [Function: createHook],;      executionAsyncId: [Function: executionAsyncId],;      triggerAsyncId: [Function: triggerAsyncId],;      executionAsyncResource: [Function: executionAsyncResource],;      AsyncResource: [class AsyncResource];    },;    timers: {;      setTimeout: [Function],;      clearTimeout: [Function: clearTimeout],;      setImmediate: [Function],;      clearImmediate: [Function: clearImmediate],;      setInterval: [Function: setInterval],;      clearInterval: [Function: clearInterval],;      _unrefActive: [Function: deprecated],;      active: [Function: deprecated],;      unenroll: [Function: deprecated],;      enroll: [Function: deprecated];    },;    events: <ref *4> [Function: EventEmitter] {;      once: [Function: once],;      on: [Function: on],;      EventEmitter: [Circular *4],;      usingDomains: false,;      captureRejectionSymbol: Symbol(nodejs.rejection),;      captureRejections: [Getter/Setter],;      errorMonitor: Symbol(events.errorMonitor),;      defaultMaxListeners: [Getter/Setter],;      init: [Function (anonymous)],;      listenerCount: [Function (anonymous)];    },;    dns: {;      lookup: [Function: lookup],;      lookupService: [Function: lookupService],;      Resolver: [class Resolver],;      setServers: [Function: defaultResolverSetServers],;      ADDRCONFIG: 1024,;      ALL: 256,;      V4MAPPED: 2048,;      NODATA: 'ENODATA',;      FORMERR: 'EFORMERR',;      SERVFAIL: 'ESERVFAIL',;      NOTFOUND: 'ENOTFOUND',;      NOTIMP: 'ENOTIMP',;      REFUSED: 'EREFUSED',;      BADQUERY: 'EBADQUERY',;      BADNAME: 'EBADNAME',;      BADFAMILY: 'EBADFAMILY',;      BADRESP: 'EBADRESP',;      CONNREFUSED: 'ECONNREFUSED',;      TIMEOUT: 'ETIMEOUT',;      EOF: 'EOF',;      FILE: 'EFILE',;      NOMEM: 'ENOMEM',;      DESTRUCTION: 'EDESTRUCTION',;      BADSTR: 'EBADSTR',;      BADFLAGS: 'EBADFLAGS',;      NONAME: 'ENONAME',;      BADHINTS: 'EBADHINTS',;      NOTINITIALIZED: 'ENOTINITIALIZED',;      LOADIPHLPAPI: 'ELOADIPHLPAPI',;      ADDRGETNETWORKPARAMS: 'EADDRGETNETWORKPARAMS',;      CANCELLED: 'ECANCELLED',;      getServers: [Function: bound getServers],;      resolve: [Function: bound resolve],;      resolve4: [Function: bound queryA],;      resolve6: [Function: bound queryAaaa],;      resolveAny: [Function: bound queryAny],;      resolveCname: [Function: bound queryCname],;      resolveMx: [Function: bound queryMx],;      resolveNaptr: [Function: bound queryNaptr],;      resolveNs: [Function: bound queryNs],;      resolvePtr: [Function: bound queryPtr],;      resolveSoa: [Function: bound querySoa],;      resolveSrv: [Function: bound querySrv],;      resolveTxt: [Function: bound queryTxt],;      reverse: [Function: bound getHostByAddr],;      promises: [Getter];    },;    net: {;      _createServerHandle: [Function: createServerHandle],;      _normalizeArgs: [Function: normalizeArgs],;      _setSimultaneousAccepts: [Function: _setSimultaneousAccepts],;      connect: [Function: connect],;      createConnection: [Function: connect],;      createServer: [Function: createServer],;      isIP: [Function: isIP],;      isIPv4: [Function: isIPv4],;      isIPv6: [Function: isIPv6],;      Server: [Function: Server],;      Socket: [Function: Socket],;      Stream: [Function: Socket];    },;    tls: {;      CLIENT_RENEG_LIMIT: 3,;      CLIENT_RENEG_WINDOW: 600,;      DEFAULT_CIPHERS: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',;      DEFAULT_ECDH_CURVE: 'auto',;      DEFAULT_MIN_VERSION: 'TLSv1.2',;      DEFAULT_MAX_VERSION: 'TLSv1.3',;      getCiphers: [Function (anonymous)],;      rootCertificates: [Getter],;      convertALPNProtocols: [Function: convertALPNProtocols],;      checkServerIdentity: [Function: checkServerIdentity],;      parseCertString: [Function: deprecated],;      createSecureContext: [Function: createSecureContext],;      SecureContext: [Function: SecureContext],;      TLSSocket: [Function: TLSSocket],;      Server: [Function: Server],;      createServer: [Function: createServer],;      connect: [Function: connect],;      createSecurePair: [Function: deprecated];    },;    http: {;      _connectionListener: [Function: connectionListener],;      METHODS: [Array],;      STATUS_CODES: [Object],;      Agent: [Function],;      ClientRequest: [Function: ClientRequest],;      IncomingMessage: [Function: IncomingMessage],;      OutgoingMessage: [Function: OutgoingMessage],;      Server: [Function: Server],;      ServerResponse: [Function: ServerResponse],;      createServer: [Function: createServer],;      validateHeaderName: [Function: hidden],;      validateHeaderValue: [Function: hidden],;      get: [Function: get],;      request: [Function: request],;      maxHeaderSize: [Getter],;      globalAgent: [Getter/Setter];    },;    https: {;      Agent: [Function: Agent],;      globalAgent: [Agent],;      Server: [Function: Server],;      createServer: [Function: createServer],;      get: [Function: get],;      request: [Function: request];    },;    http2: {;      connect: [Function: connect],;      constants: [Object],;      createServer: [Function: createServer],;      createSecureServer: [Function: createSecureServer],;      getDefaultSettings: [Function: getDefaultSettings],;      getPackedSettings: [Function: getPackedSettings],;      getUnpackedSettings: [Function: getUnpackedSettings],;      Http2ServerRequest: [class Http2ServerRequest extends Readable],;      Http2ServerResponse: [class Http2ServerResponse extends Stream];    },;    dgram: {;      _createSocketHandle: [Function: deprecated],;      createSocket: [Function: createSocket],;      Socket: [Function: Socket];    };  },;  npm: {;    ws: [class WebSocket extends EventEmitter] {;      CONNECTING: 0,;      OPEN: 1,;      CLOSING: 2,;      CLOSED: 3,;      createWebSocketStream: [Function: createWebSocketStream],;      Server: [class WebSocketServer extends EventEmitter],;      Receiver: [class Receiver extends Writable],;      Sender: [class Sender];    };  },;  common: {;    config: { Config: [class Config], readConfig: [Function: readConfig] },;    database: { Database: [class Database] },;    logger: {;      Logger: [class Logger extends EventEmitter],;      openLog: [AsyncFunction: openLog];    },;    server: { Server: [class Server] },;    utils: {;      random: [Function: random],;      sample: [Function: sample],;      ipToInt: [Function: ipToInt],;      parseHost: [Function: parseHost],;      replace: [Function: replace],;      fileExt: [Function: fileExt],;      between: [Function: between],;      isFirstUpper: [Function: isFirstUpper],;      toLowerCamel: [Function: toLowerCamel],;      toUpperCamel: [Function: toUpperCamel],;      isConstant: [Function: isConstant],;      nowDate: [Function: nowDate],;      duration: [Function: duration],;      makePrivate: [Function: makePrivate],;      protect: [Function: protect],;      parseCookies: [Function: parseCookies],;      createAbortController: [Function: createAbortController],;      timeout: [Function: timeout],;      delay: [Function: delay],;      secutity: [Object],;      semaphore: [Object],;      loader: [Object],;      concolor: [Function],;      vm: [Object],;      watch: [Object];    };  },;  application: {;    worker: { id: 'W2' },;    server: { host: '0.0.0.0', port: 8001, protocol: 'http' },;    auth: Auth {;      characters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',;      secret: 'secret',;      length: 64,;      db: null;    },;    resources: null,;    introspect: [AsyncFunction (anonymous)];  },;  config: {;    cache: { size: '50mb', maxFileSize: '10mb' },;    database: {;      host: '127.0.0.1',;      port: 5432,;      database: 'application',;      user: 'marcus',;      password: 'marcus';    },;    log: {;      keepDays: 100,;      writeInterval: 3000,;      writeBuffer: 65536,;      toFile: [Array],;      toStdout: [Array];    },;    server: {;      host: '0.0.0.0',;      balancer: 8000,;      protocol: 'http',;      ports: [Array],;      nagle: false,;      timeouts: [Object],;      queue: [Object],;      workers: [Object];    },;    sessions: {;      sid: 'token',;      characters: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',;      length: 64,;      secret: 'secret',;      regenerate: 3600000,;      expire: 7200000,;      persistent: true,;      limits: [Object];    };  },;  api: {},;  lib: {},;  domain: {};}
2021-05-31T14:48:19.327Z [info] Application started in worker 2
2021-05-31T14:48:19.329Z [info] Listen port 8001 in worker 2
2021-05-31T14:54:22.777Z [debug] createSandbox
2021-05-31T14:54:22.778Z [info] Application started in worker 2
2021-05-31T14:54:22.781Z [info] Listen port 8001 in worker 2
2021-05-31T14:55:39.554Z [log] bind
2021-05-31T14:55:39.557Z [debug] createSandbox
2021-05-31T14:55:39.558Z [info] Application started in worker 2
2021-05-31T14:55:39.561Z [info] Listen port 8001 in worker 2
2021-05-31T14:57:01.736Z [debug] createSandbox
2021-05-31T14:57:01.738Z [info] Application started in worker 2
2021-05-31T14:57:01.741Z [info] Listen port 8001 in worker 2
2021-05-31T14:57:01.877Z [log] listener
2021-05-31T14:57:01.932Z [log] listener
2021-05-31T14:57:14.724Z [log] listener
2021-05-31T14:57:17.363Z [log] listener
2021-05-31T14:57:58.643Z [log] listener
2021-05-31T14:58:22.884Z [debug] createSandbox
2021-05-31T14:58:22.886Z [info] Application started in worker 2
2021-05-31T14:58:22.890Z [info] Listen port 8001 in worker 2
2021-05-31T14:58:22.941Z [log] listener
2021-05-31T14:58:24.610Z [log] listener
2021-05-31T14:58:24.678Z [log] listener
2021-05-31T14:58:26.346Z [log] listener
2021-05-31T14:58:26.369Z [log] listener
2021-05-31T14:58:26.469Z [log] listener
2021-05-31T14:58:27.896Z [log] listener
2021-05-31T14:58:30.339Z [log] listener
2021-05-31T14:58:30.361Z [log] listener
2021-05-31T14:58:31.723Z [log] listener
2021-05-31T14:58:31.745Z [log] listener
2021-05-31T14:58:31.894Z [log] listener
2021-05-31T14:58:32.891Z [log] listener
2021-05-31T14:58:32.913Z [log] listener
2021-05-31T14:58:33.375Z [log] listener
2021-05-31T14:58:34.434Z [log] listener
2021-05-31T14:58:36.723Z [log] listener
2021-05-31T14:58:36.761Z [log] listener
2021-05-31T14:58:38.305Z [log] listener
2021-05-31T14:58:42.364Z [log] listener
2021-05-31T14:58:42.388Z [log] listener
2021-05-31T14:58:42.628Z [log] listener
2021-05-31T14:58:42.650Z [log] listener
2021-05-31T14:58:42.891Z [log] listener
2021-05-31T14:58:42.915Z [log] listener
2021-05-31T14:58:43.147Z [log] listener
2021-05-31T14:58:43.171Z [log] listener
2021-05-31T14:58:43.403Z [log] listener
2021-05-31T14:58:43.425Z [log] listener
2021-05-31T14:58:43.651Z [log] listener
2021-05-31T14:58:43.673Z [log] listener
2021-05-31T14:58:43.899Z [log] listener
2021-05-31T14:58:43.924Z [log] listener
2021-05-31T14:58:44.180Z [log] listener
2021-05-31T14:58:44.203Z [log] listener
2021-05-31T14:58:45.836Z [log] listener
2021-05-31T14:59:15.219Z [log] listener
